// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="LZW_encoding_HW_LZW_encoding_HW,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu3eg-sbva484-1-i,HLS_INPUT_CLOCK=6.667000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.866910,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=21,HLS_SYN_DSP=0,HLS_SYN_FF=2663,HLS_SYN_LUT=4949,HLS_VERSION=2020_2}" *)

module LZW_encoding_HW (
        ap_clk,
        ap_rst_n,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 303'd1;
parameter    ap_ST_fsm_pp0_stage0 = 303'd2;
parameter    ap_ST_fsm_state5 = 303'd4;
parameter    ap_ST_fsm_state6 = 303'd8;
parameter    ap_ST_fsm_state7 = 303'd16;
parameter    ap_ST_fsm_state8 = 303'd32;
parameter    ap_ST_fsm_state9 = 303'd64;
parameter    ap_ST_fsm_state10 = 303'd128;
parameter    ap_ST_fsm_state11 = 303'd256;
parameter    ap_ST_fsm_state12 = 303'd512;
parameter    ap_ST_fsm_state13 = 303'd1024;
parameter    ap_ST_fsm_state14 = 303'd2048;
parameter    ap_ST_fsm_state15 = 303'd4096;
parameter    ap_ST_fsm_state16 = 303'd8192;
parameter    ap_ST_fsm_state17 = 303'd16384;
parameter    ap_ST_fsm_state18 = 303'd32768;
parameter    ap_ST_fsm_state19 = 303'd65536;
parameter    ap_ST_fsm_state20 = 303'd131072;
parameter    ap_ST_fsm_state21 = 303'd262144;
parameter    ap_ST_fsm_state22 = 303'd524288;
parameter    ap_ST_fsm_state23 = 303'd1048576;
parameter    ap_ST_fsm_state24 = 303'd2097152;
parameter    ap_ST_fsm_state25 = 303'd4194304;
parameter    ap_ST_fsm_state26 = 303'd8388608;
parameter    ap_ST_fsm_state27 = 303'd16777216;
parameter    ap_ST_fsm_state28 = 303'd33554432;
parameter    ap_ST_fsm_state29 = 303'd67108864;
parameter    ap_ST_fsm_state30 = 303'd134217728;
parameter    ap_ST_fsm_state31 = 303'd268435456;
parameter    ap_ST_fsm_state32 = 303'd536870912;
parameter    ap_ST_fsm_state33 = 303'd1073741824;
parameter    ap_ST_fsm_state34 = 303'd2147483648;
parameter    ap_ST_fsm_state35 = 303'd4294967296;
parameter    ap_ST_fsm_state36 = 303'd8589934592;
parameter    ap_ST_fsm_state37 = 303'd17179869184;
parameter    ap_ST_fsm_state38 = 303'd34359738368;
parameter    ap_ST_fsm_state39 = 303'd68719476736;
parameter    ap_ST_fsm_state40 = 303'd137438953472;
parameter    ap_ST_fsm_state41 = 303'd274877906944;
parameter    ap_ST_fsm_state42 = 303'd549755813888;
parameter    ap_ST_fsm_state43 = 303'd1099511627776;
parameter    ap_ST_fsm_state44 = 303'd2199023255552;
parameter    ap_ST_fsm_state45 = 303'd4398046511104;
parameter    ap_ST_fsm_state46 = 303'd8796093022208;
parameter    ap_ST_fsm_state47 = 303'd17592186044416;
parameter    ap_ST_fsm_state48 = 303'd35184372088832;
parameter    ap_ST_fsm_state49 = 303'd70368744177664;
parameter    ap_ST_fsm_state50 = 303'd140737488355328;
parameter    ap_ST_fsm_state51 = 303'd281474976710656;
parameter    ap_ST_fsm_state52 = 303'd562949953421312;
parameter    ap_ST_fsm_state53 = 303'd1125899906842624;
parameter    ap_ST_fsm_state54 = 303'd2251799813685248;
parameter    ap_ST_fsm_state55 = 303'd4503599627370496;
parameter    ap_ST_fsm_state56 = 303'd9007199254740992;
parameter    ap_ST_fsm_state57 = 303'd18014398509481984;
parameter    ap_ST_fsm_state58 = 303'd36028797018963968;
parameter    ap_ST_fsm_state59 = 303'd72057594037927936;
parameter    ap_ST_fsm_state60 = 303'd144115188075855872;
parameter    ap_ST_fsm_state61 = 303'd288230376151711744;
parameter    ap_ST_fsm_state62 = 303'd576460752303423488;
parameter    ap_ST_fsm_state63 = 303'd1152921504606846976;
parameter    ap_ST_fsm_state64 = 303'd2305843009213693952;
parameter    ap_ST_fsm_state65 = 303'd4611686018427387904;
parameter    ap_ST_fsm_state66 = 303'd9223372036854775808;
parameter    ap_ST_fsm_state67 = 303'd18446744073709551616;
parameter    ap_ST_fsm_state68 = 303'd36893488147419103232;
parameter    ap_ST_fsm_state69 = 303'd73786976294838206464;
parameter    ap_ST_fsm_state70 = 303'd147573952589676412928;
parameter    ap_ST_fsm_state71 = 303'd295147905179352825856;
parameter    ap_ST_fsm_state72 = 303'd590295810358705651712;
parameter    ap_ST_fsm_state73 = 303'd1180591620717411303424;
parameter    ap_ST_fsm_state74 = 303'd2361183241434822606848;
parameter    ap_ST_fsm_state75 = 303'd4722366482869645213696;
parameter    ap_ST_fsm_state76 = 303'd9444732965739290427392;
parameter    ap_ST_fsm_state77 = 303'd18889465931478580854784;
parameter    ap_ST_fsm_state78 = 303'd37778931862957161709568;
parameter    ap_ST_fsm_state79 = 303'd75557863725914323419136;
parameter    ap_ST_fsm_state80 = 303'd151115727451828646838272;
parameter    ap_ST_fsm_state81 = 303'd302231454903657293676544;
parameter    ap_ST_fsm_state82 = 303'd604462909807314587353088;
parameter    ap_ST_fsm_state83 = 303'd1208925819614629174706176;
parameter    ap_ST_fsm_state84 = 303'd2417851639229258349412352;
parameter    ap_ST_fsm_state85 = 303'd4835703278458516698824704;
parameter    ap_ST_fsm_state86 = 303'd9671406556917033397649408;
parameter    ap_ST_fsm_state87 = 303'd19342813113834066795298816;
parameter    ap_ST_fsm_state88 = 303'd38685626227668133590597632;
parameter    ap_ST_fsm_state89 = 303'd77371252455336267181195264;
parameter    ap_ST_fsm_state90 = 303'd154742504910672534362390528;
parameter    ap_ST_fsm_state91 = 303'd309485009821345068724781056;
parameter    ap_ST_fsm_state92 = 303'd618970019642690137449562112;
parameter    ap_ST_fsm_state93 = 303'd1237940039285380274899124224;
parameter    ap_ST_fsm_state94 = 303'd2475880078570760549798248448;
parameter    ap_ST_fsm_state95 = 303'd4951760157141521099596496896;
parameter    ap_ST_fsm_state96 = 303'd9903520314283042199192993792;
parameter    ap_ST_fsm_state97 = 303'd19807040628566084398385987584;
parameter    ap_ST_fsm_state98 = 303'd39614081257132168796771975168;
parameter    ap_ST_fsm_state99 = 303'd79228162514264337593543950336;
parameter    ap_ST_fsm_state100 = 303'd158456325028528675187087900672;
parameter    ap_ST_fsm_state101 = 303'd316912650057057350374175801344;
parameter    ap_ST_fsm_state102 = 303'd633825300114114700748351602688;
parameter    ap_ST_fsm_state103 = 303'd1267650600228229401496703205376;
parameter    ap_ST_fsm_state104 = 303'd2535301200456458802993406410752;
parameter    ap_ST_fsm_state105 = 303'd5070602400912917605986812821504;
parameter    ap_ST_fsm_state106 = 303'd10141204801825835211973625643008;
parameter    ap_ST_fsm_state107 = 303'd20282409603651670423947251286016;
parameter    ap_ST_fsm_state108 = 303'd40564819207303340847894502572032;
parameter    ap_ST_fsm_state109 = 303'd81129638414606681695789005144064;
parameter    ap_ST_fsm_state110 = 303'd162259276829213363391578010288128;
parameter    ap_ST_fsm_state111 = 303'd324518553658426726783156020576256;
parameter    ap_ST_fsm_state112 = 303'd649037107316853453566312041152512;
parameter    ap_ST_fsm_state113 = 303'd1298074214633706907132624082305024;
parameter    ap_ST_fsm_state114 = 303'd2596148429267413814265248164610048;
parameter    ap_ST_fsm_state115 = 303'd5192296858534827628530496329220096;
parameter    ap_ST_fsm_state116 = 303'd10384593717069655257060992658440192;
parameter    ap_ST_fsm_state117 = 303'd20769187434139310514121985316880384;
parameter    ap_ST_fsm_state118 = 303'd41538374868278621028243970633760768;
parameter    ap_ST_fsm_state119 = 303'd83076749736557242056487941267521536;
parameter    ap_ST_fsm_state120 = 303'd166153499473114484112975882535043072;
parameter    ap_ST_fsm_state121 = 303'd332306998946228968225951765070086144;
parameter    ap_ST_fsm_state122 = 303'd664613997892457936451903530140172288;
parameter    ap_ST_fsm_state123 = 303'd1329227995784915872903807060280344576;
parameter    ap_ST_fsm_state124 = 303'd2658455991569831745807614120560689152;
parameter    ap_ST_fsm_state125 = 303'd5316911983139663491615228241121378304;
parameter    ap_ST_fsm_state126 = 303'd10633823966279326983230456482242756608;
parameter    ap_ST_fsm_state127 = 303'd21267647932558653966460912964485513216;
parameter    ap_ST_fsm_state128 = 303'd42535295865117307932921825928971026432;
parameter    ap_ST_fsm_state129 = 303'd85070591730234615865843651857942052864;
parameter    ap_ST_fsm_state130 = 303'd170141183460469231731687303715884105728;
parameter    ap_ST_fsm_state131 = 303'd340282366920938463463374607431768211456;
parameter    ap_ST_fsm_state132 = 303'd680564733841876926926749214863536422912;
parameter    ap_ST_fsm_state133 = 303'd1361129467683753853853498429727072845824;
parameter    ap_ST_fsm_state134 = 303'd2722258935367507707706996859454145691648;
parameter    ap_ST_fsm_state135 = 303'd5444517870735015415413993718908291383296;
parameter    ap_ST_fsm_state136 = 303'd10889035741470030830827987437816582766592;
parameter    ap_ST_fsm_state137 = 303'd21778071482940061661655974875633165533184;
parameter    ap_ST_fsm_state138 = 303'd43556142965880123323311949751266331066368;
parameter    ap_ST_fsm_state139 = 303'd87112285931760246646623899502532662132736;
parameter    ap_ST_fsm_state140 = 303'd174224571863520493293247799005065324265472;
parameter    ap_ST_fsm_state141 = 303'd348449143727040986586495598010130648530944;
parameter    ap_ST_fsm_state142 = 303'd696898287454081973172991196020261297061888;
parameter    ap_ST_fsm_state143 = 303'd1393796574908163946345982392040522594123776;
parameter    ap_ST_fsm_state144 = 303'd2787593149816327892691964784081045188247552;
parameter    ap_ST_fsm_state145 = 303'd5575186299632655785383929568162090376495104;
parameter    ap_ST_fsm_state146 = 303'd11150372599265311570767859136324180752990208;
parameter    ap_ST_fsm_state147 = 303'd22300745198530623141535718272648361505980416;
parameter    ap_ST_fsm_state148 = 303'd44601490397061246283071436545296723011960832;
parameter    ap_ST_fsm_state149 = 303'd89202980794122492566142873090593446023921664;
parameter    ap_ST_fsm_state150 = 303'd178405961588244985132285746181186892047843328;
parameter    ap_ST_fsm_state151 = 303'd356811923176489970264571492362373784095686656;
parameter    ap_ST_fsm_state152 = 303'd713623846352979940529142984724747568191373312;
parameter    ap_ST_fsm_state153 = 303'd1427247692705959881058285969449495136382746624;
parameter    ap_ST_fsm_state154 = 303'd2854495385411919762116571938898990272765493248;
parameter    ap_ST_fsm_state155 = 303'd5708990770823839524233143877797980545530986496;
parameter    ap_ST_fsm_state156 = 303'd11417981541647679048466287755595961091061972992;
parameter    ap_ST_fsm_state157 = 303'd22835963083295358096932575511191922182123945984;
parameter    ap_ST_fsm_state158 = 303'd45671926166590716193865151022383844364247891968;
parameter    ap_ST_fsm_state159 = 303'd91343852333181432387730302044767688728495783936;
parameter    ap_ST_fsm_state160 = 303'd182687704666362864775460604089535377456991567872;
parameter    ap_ST_fsm_state161 = 303'd365375409332725729550921208179070754913983135744;
parameter    ap_ST_fsm_state162 = 303'd730750818665451459101842416358141509827966271488;
parameter    ap_ST_fsm_state163 = 303'd1461501637330902918203684832716283019655932542976;
parameter    ap_ST_fsm_state164 = 303'd2923003274661805836407369665432566039311865085952;
parameter    ap_ST_fsm_state165 = 303'd5846006549323611672814739330865132078623730171904;
parameter    ap_ST_fsm_state166 = 303'd11692013098647223345629478661730264157247460343808;
parameter    ap_ST_fsm_state167 = 303'd23384026197294446691258957323460528314494920687616;
parameter    ap_ST_fsm_state168 = 303'd46768052394588893382517914646921056628989841375232;
parameter    ap_ST_fsm_state169 = 303'd93536104789177786765035829293842113257979682750464;
parameter    ap_ST_fsm_state170 = 303'd187072209578355573530071658587684226515959365500928;
parameter    ap_ST_fsm_state171 = 303'd374144419156711147060143317175368453031918731001856;
parameter    ap_ST_fsm_state172 = 303'd748288838313422294120286634350736906063837462003712;
parameter    ap_ST_fsm_state173 = 303'd1496577676626844588240573268701473812127674924007424;
parameter    ap_ST_fsm_state174 = 303'd2993155353253689176481146537402947624255349848014848;
parameter    ap_ST_fsm_state175 = 303'd5986310706507378352962293074805895248510699696029696;
parameter    ap_ST_fsm_state176 = 303'd11972621413014756705924586149611790497021399392059392;
parameter    ap_ST_fsm_state177 = 303'd23945242826029513411849172299223580994042798784118784;
parameter    ap_ST_fsm_state178 = 303'd47890485652059026823698344598447161988085597568237568;
parameter    ap_ST_fsm_state179 = 303'd95780971304118053647396689196894323976171195136475136;
parameter    ap_ST_fsm_state180 = 303'd191561942608236107294793378393788647952342390272950272;
parameter    ap_ST_fsm_state181 = 303'd383123885216472214589586756787577295904684780545900544;
parameter    ap_ST_fsm_state182 = 303'd766247770432944429179173513575154591809369561091801088;
parameter    ap_ST_fsm_state183 = 303'd1532495540865888858358347027150309183618739122183602176;
parameter    ap_ST_fsm_state184 = 303'd3064991081731777716716694054300618367237478244367204352;
parameter    ap_ST_fsm_state185 = 303'd6129982163463555433433388108601236734474956488734408704;
parameter    ap_ST_fsm_state186 = 303'd12259964326927110866866776217202473468949912977468817408;
parameter    ap_ST_fsm_state187 = 303'd24519928653854221733733552434404946937899825954937634816;
parameter    ap_ST_fsm_state188 = 303'd49039857307708443467467104868809893875799651909875269632;
parameter    ap_ST_fsm_state189 = 303'd98079714615416886934934209737619787751599303819750539264;
parameter    ap_ST_fsm_state190 = 303'd196159429230833773869868419475239575503198607639501078528;
parameter    ap_ST_fsm_state191 = 303'd392318858461667547739736838950479151006397215279002157056;
parameter    ap_ST_fsm_state192 = 303'd784637716923335095479473677900958302012794430558004314112;
parameter    ap_ST_fsm_state193 = 303'd1569275433846670190958947355801916604025588861116008628224;
parameter    ap_ST_fsm_state194 = 303'd3138550867693340381917894711603833208051177722232017256448;
parameter    ap_ST_fsm_state195 = 303'd6277101735386680763835789423207666416102355444464034512896;
parameter    ap_ST_fsm_state196 = 303'd12554203470773361527671578846415332832204710888928069025792;
parameter    ap_ST_fsm_state197 = 303'd25108406941546723055343157692830665664409421777856138051584;
parameter    ap_ST_fsm_state198 = 303'd50216813883093446110686315385661331328818843555712276103168;
parameter    ap_ST_fsm_state199 = 303'd100433627766186892221372630771322662657637687111424552206336;
parameter    ap_ST_fsm_state200 = 303'd200867255532373784442745261542645325315275374222849104412672;
parameter    ap_ST_fsm_state201 = 303'd401734511064747568885490523085290650630550748445698208825344;
parameter    ap_ST_fsm_state202 = 303'd803469022129495137770981046170581301261101496891396417650688;
parameter    ap_ST_fsm_state203 = 303'd1606938044258990275541962092341162602522202993782792835301376;
parameter    ap_ST_fsm_state204 = 303'd3213876088517980551083924184682325205044405987565585670602752;
parameter    ap_ST_fsm_state205 = 303'd6427752177035961102167848369364650410088811975131171341205504;
parameter    ap_ST_fsm_state206 = 303'd12855504354071922204335696738729300820177623950262342682411008;
parameter    ap_ST_fsm_state207 = 303'd25711008708143844408671393477458601640355247900524685364822016;
parameter    ap_ST_fsm_state208 = 303'd51422017416287688817342786954917203280710495801049370729644032;
parameter    ap_ST_fsm_state209 = 303'd102844034832575377634685573909834406561420991602098741459288064;
parameter    ap_ST_fsm_state210 = 303'd205688069665150755269371147819668813122841983204197482918576128;
parameter    ap_ST_fsm_state211 = 303'd411376139330301510538742295639337626245683966408394965837152256;
parameter    ap_ST_fsm_state212 = 303'd822752278660603021077484591278675252491367932816789931674304512;
parameter    ap_ST_fsm_state213 = 303'd1645504557321206042154969182557350504982735865633579863348609024;
parameter    ap_ST_fsm_state214 = 303'd3291009114642412084309938365114701009965471731267159726697218048;
parameter    ap_ST_fsm_state215 = 303'd6582018229284824168619876730229402019930943462534319453394436096;
parameter    ap_ST_fsm_state216 = 303'd13164036458569648337239753460458804039861886925068638906788872192;
parameter    ap_ST_fsm_state217 = 303'd26328072917139296674479506920917608079723773850137277813577744384;
parameter    ap_ST_fsm_state218 = 303'd52656145834278593348959013841835216159447547700274555627155488768;
parameter    ap_ST_fsm_state219 = 303'd105312291668557186697918027683670432318895095400549111254310977536;
parameter    ap_ST_fsm_state220 = 303'd210624583337114373395836055367340864637790190801098222508621955072;
parameter    ap_ST_fsm_state221 = 303'd421249166674228746791672110734681729275580381602196445017243910144;
parameter    ap_ST_fsm_state222 = 303'd842498333348457493583344221469363458551160763204392890034487820288;
parameter    ap_ST_fsm_state223 = 303'd1684996666696914987166688442938726917102321526408785780068975640576;
parameter    ap_ST_fsm_state224 = 303'd3369993333393829974333376885877453834204643052817571560137951281152;
parameter    ap_ST_fsm_state225 = 303'd6739986666787659948666753771754907668409286105635143120275902562304;
parameter    ap_ST_fsm_state226 = 303'd13479973333575319897333507543509815336818572211270286240551805124608;
parameter    ap_ST_fsm_state227 = 303'd26959946667150639794667015087019630673637144422540572481103610249216;
parameter    ap_ST_fsm_state228 = 303'd53919893334301279589334030174039261347274288845081144962207220498432;
parameter    ap_ST_fsm_state229 = 303'd107839786668602559178668060348078522694548577690162289924414440996864;
parameter    ap_ST_fsm_state230 = 303'd215679573337205118357336120696157045389097155380324579848828881993728;
parameter    ap_ST_fsm_state231 = 303'd431359146674410236714672241392314090778194310760649159697657763987456;
parameter    ap_ST_fsm_state232 = 303'd862718293348820473429344482784628181556388621521298319395315527974912;
parameter    ap_ST_fsm_state233 = 303'd1725436586697640946858688965569256363112777243042596638790631055949824;
parameter    ap_ST_fsm_state234 = 303'd3450873173395281893717377931138512726225554486085193277581262111899648;
parameter    ap_ST_fsm_state235 = 303'd6901746346790563787434755862277025452451108972170386555162524223799296;
parameter    ap_ST_fsm_state236 = 303'd13803492693581127574869511724554050904902217944340773110325048447598592;
parameter    ap_ST_fsm_state237 = 303'd27606985387162255149739023449108101809804435888681546220650096895197184;
parameter    ap_ST_fsm_state238 = 303'd55213970774324510299478046898216203619608871777363092441300193790394368;
parameter    ap_ST_fsm_state239 = 303'd110427941548649020598956093796432407239217743554726184882600387580788736;
parameter    ap_ST_fsm_state240 = 303'd220855883097298041197912187592864814478435487109452369765200775161577472;
parameter    ap_ST_fsm_state241 = 303'd441711766194596082395824375185729628956870974218904739530401550323154944;
parameter    ap_ST_fsm_state242 = 303'd883423532389192164791648750371459257913741948437809479060803100646309888;
parameter    ap_ST_fsm_state243 = 303'd1766847064778384329583297500742918515827483896875618958121606201292619776;
parameter    ap_ST_fsm_state244 = 303'd3533694129556768659166595001485837031654967793751237916243212402585239552;
parameter    ap_ST_fsm_state245 = 303'd7067388259113537318333190002971674063309935587502475832486424805170479104;
parameter    ap_ST_fsm_state246 = 303'd14134776518227074636666380005943348126619871175004951664972849610340958208;
parameter    ap_ST_fsm_state247 = 303'd28269553036454149273332760011886696253239742350009903329945699220681916416;
parameter    ap_ST_fsm_state248 = 303'd56539106072908298546665520023773392506479484700019806659891398441363832832;
parameter    ap_ST_fsm_state249 = 303'd113078212145816597093331040047546785012958969400039613319782796882727665664;
parameter    ap_ST_fsm_state250 = 303'd226156424291633194186662080095093570025917938800079226639565593765455331328;
parameter    ap_ST_fsm_state251 = 303'd452312848583266388373324160190187140051835877600158453279131187530910662656;
parameter    ap_ST_fsm_state252 = 303'd904625697166532776746648320380374280103671755200316906558262375061821325312;
parameter    ap_ST_fsm_state253 = 303'd1809251394333065553493296640760748560207343510400633813116524750123642650624;
parameter    ap_ST_fsm_state254 = 303'd3618502788666131106986593281521497120414687020801267626233049500247285301248;
parameter    ap_ST_fsm_state255 = 303'd7237005577332262213973186563042994240829374041602535252466099000494570602496;
parameter    ap_ST_fsm_state256 = 303'd14474011154664524427946373126085988481658748083205070504932198000989141204992;
parameter    ap_ST_fsm_state257 = 303'd28948022309329048855892746252171976963317496166410141009864396001978282409984;
parameter    ap_ST_fsm_state258 = 303'd57896044618658097711785492504343953926634992332820282019728792003956564819968;
parameter    ap_ST_fsm_state259 = 303'd115792089237316195423570985008687907853269984665640564039457584007913129639936;
parameter    ap_ST_fsm_state260 = 303'd231584178474632390847141970017375815706539969331281128078915168015826259279872;
parameter    ap_ST_fsm_state261 = 303'd463168356949264781694283940034751631413079938662562256157830336031652518559744;
parameter    ap_ST_fsm_state262 = 303'd926336713898529563388567880069503262826159877325124512315660672063305037119488;
parameter    ap_ST_fsm_state263 = 303'd1852673427797059126777135760139006525652319754650249024631321344126610074238976;
parameter    ap_ST_fsm_state264 = 303'd3705346855594118253554271520278013051304639509300498049262642688253220148477952;
parameter    ap_ST_fsm_state265 = 303'd7410693711188236507108543040556026102609279018600996098525285376506440296955904;
parameter    ap_ST_fsm_state266 = 303'd14821387422376473014217086081112052205218558037201992197050570753012880593911808;
parameter    ap_ST_fsm_state267 = 303'd29642774844752946028434172162224104410437116074403984394101141506025761187823616;
parameter    ap_ST_fsm_state268 = 303'd59285549689505892056868344324448208820874232148807968788202283012051522375647232;
parameter    ap_ST_fsm_state269 = 303'd118571099379011784113736688648896417641748464297615937576404566024103044751294464;
parameter    ap_ST_fsm_state270 = 303'd237142198758023568227473377297792835283496928595231875152809132048206089502588928;
parameter    ap_ST_fsm_state271 = 303'd474284397516047136454946754595585670566993857190463750305618264096412179005177856;
parameter    ap_ST_fsm_state272 = 303'd948568795032094272909893509191171341133987714380927500611236528192824358010355712;
parameter    ap_ST_fsm_state273 = 303'd1897137590064188545819787018382342682267975428761855001222473056385648716020711424;
parameter    ap_ST_fsm_state274 = 303'd3794275180128377091639574036764685364535950857523710002444946112771297432041422848;
parameter    ap_ST_fsm_state275 = 303'd7588550360256754183279148073529370729071901715047420004889892225542594864082845696;
parameter    ap_ST_fsm_state276 = 303'd15177100720513508366558296147058741458143803430094840009779784451085189728165691392;
parameter    ap_ST_fsm_state277 = 303'd30354201441027016733116592294117482916287606860189680019559568902170379456331382784;
parameter    ap_ST_fsm_state278 = 303'd60708402882054033466233184588234965832575213720379360039119137804340758912662765568;
parameter    ap_ST_fsm_state279 = 303'd121416805764108066932466369176469931665150427440758720078238275608681517825325531136;
parameter    ap_ST_fsm_state280 = 303'd242833611528216133864932738352939863330300854881517440156476551217363035650651062272;
parameter    ap_ST_fsm_state281 = 303'd485667223056432267729865476705879726660601709763034880312953102434726071301302124544;
parameter    ap_ST_fsm_state282 = 303'd971334446112864535459730953411759453321203419526069760625906204869452142602604249088;
parameter    ap_ST_fsm_state283 = 303'd1942668892225729070919461906823518906642406839052139521251812409738904285205208498176;
parameter    ap_ST_fsm_state284 = 303'd3885337784451458141838923813647037813284813678104279042503624819477808570410416996352;
parameter    ap_ST_fsm_state285 = 303'd7770675568902916283677847627294075626569627356208558085007249638955617140820833992704;
parameter    ap_ST_fsm_state286 = 303'd15541351137805832567355695254588151253139254712417116170014499277911234281641667985408;
parameter    ap_ST_fsm_state287 = 303'd31082702275611665134711390509176302506278509424834232340028998555822468563283335970816;
parameter    ap_ST_fsm_state288 = 303'd62165404551223330269422781018352605012557018849668464680057997111644937126566671941632;
parameter    ap_ST_fsm_state289 = 303'd124330809102446660538845562036705210025114037699336929360115994223289874253133343883264;
parameter    ap_ST_fsm_state290 = 303'd248661618204893321077691124073410420050228075398673858720231988446579748506266687766528;
parameter    ap_ST_fsm_state291 = 303'd497323236409786642155382248146820840100456150797347717440463976893159497012533375533056;
parameter    ap_ST_fsm_state292 = 303'd994646472819573284310764496293641680200912301594695434880927953786318994025066751066112;
parameter    ap_ST_fsm_state293 = 303'd1989292945639146568621528992587283360401824603189390869761855907572637988050133502132224;
parameter    ap_ST_fsm_state294 = 303'd3978585891278293137243057985174566720803649206378781739523711815145275976100267004264448;
parameter    ap_ST_fsm_state295 = 303'd7957171782556586274486115970349133441607298412757563479047423630290551952200534008528896;
parameter    ap_ST_fsm_state296 = 303'd15914343565113172548972231940698266883214596825515126958094847260581103904401068017057792;
parameter    ap_ST_fsm_state297 = 303'd31828687130226345097944463881396533766429193651030253916189694521162207808802136034115584;
parameter    ap_ST_fsm_state298 = 303'd63657374260452690195888927762793067532858387302060507832379389042324415617604272068231168;
parameter    ap_ST_fsm_state299 = 303'd127314748520905380391777855525586135065716774604121015664758778084648831235208544136462336;
parameter    ap_ST_fsm_state300 = 303'd254629497041810760783555711051172270131433549208242031329517556169297662470417088272924672;
parameter    ap_ST_fsm_state301 = 303'd509258994083621521567111422102344540262867098416484062659035112338595324940834176545849344;
parameter    ap_ST_fsm_state302 = 303'd1018517988167243043134222844204689080525734196832968125318070224677190649881668353091698688;
parameter    ap_ST_fsm_state303 = 303'd2037035976334486086268445688409378161051468393665936250636140449354381299763336706183397376;
parameter    ap_ST_fsm_state304 = 303'd4074071952668972172536891376818756322102936787331872501272280898708762599526673412366794752;
parameter    ap_ST_fsm_state305 = 303'd8148143905337944345073782753637512644205873574663745002544561797417525199053346824733589504;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_ID_WIDTH = 1;
parameter    C_M_AXI_GMEM_ADDR_WIDTH = 64;
parameter    C_M_AXI_GMEM_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_AWUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_ARUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_WUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_RUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_BUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_USER_VALUE = 0;
parameter    C_M_AXI_GMEM_PROT_VALUE = 0;
parameter    C_M_AXI_GMEM_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_GMEM_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_AWADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_AWID;
output  [7:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [C_M_AXI_GMEM_AWUSER_WIDTH - 1:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_WDATA;
output  [C_M_AXI_GMEM_WSTRB_WIDTH - 1:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_WID;
output  [C_M_AXI_GMEM_WUSER_WIDTH - 1:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_ARADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_ARID;
output  [7:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [C_M_AXI_GMEM_ARUSER_WIDTH - 1:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_RID;
input  [C_M_AXI_GMEM_RUSER_WIDTH - 1:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_BID;
input  [C_M_AXI_GMEM_BUSER_WIDTH - 1:0] m_axi_gmem_BUSER;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
output   interrupt;

(* shreg_extract = "no" *) reg    ap_rst_reg_2;
(* shreg_extract = "no" *) reg    ap_rst_reg_1;
(* shreg_extract = "no" *) reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
wire    ap_continue;
reg    ap_done_reg;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [302:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [63:0] data_in;
wire   [31:0] len;
wire   [63:0] data_out;
reg   [12:0] table_r_address0;
reg    table_r_ce0;
reg    table_r_we0;
reg   [31:0] table_r_d0;
wire   [31:0] table_r_q0;
reg    gmem_blk_n_AR;
wire    ap_CS_fsm_state5;
reg    gmem_blk_n_R;
wire    ap_CS_fsm_state75;
wire    ap_CS_fsm_state78;
wire    ap_CS_fsm_state148;
reg    gmem_blk_n_AW;
wire    ap_CS_fsm_state161;
reg    gmem_blk_n_W;
wire    ap_CS_fsm_state162;
reg    gmem_blk_n_B;
wire    ap_CS_fsm_state230;
reg   [0:0] icmp_ln37_2_reg_1622;
reg   [0:0] icmp_ln37_1_reg_1618;
wire    ap_CS_fsm_state236;
wire    ap_CS_fsm_state237;
wire    ap_CS_fsm_state305;
reg    gmem_AWVALID;
wire    gmem_AWREADY;
reg   [63:0] gmem_AWADDR;
reg    gmem_WVALID;
wire    gmem_WREADY;
reg   [31:0] gmem_WDATA;
reg    gmem_ARVALID;
wire    gmem_ARREADY;
reg   [63:0] gmem_ARADDR;
wire    gmem_RVALID;
reg    gmem_RREADY;
wire   [31:0] gmem_RDATA;
wire    gmem_RLAST;
wire   [0:0] gmem_RID;
wire   [0:0] gmem_RUSER;
wire   [1:0] gmem_RRESP;
wire    gmem_BVALID;
reg    gmem_BREADY;
wire   [1:0] gmem_BRESP;
wire   [0:0] gmem_BID;
wire   [0:0] gmem_BUSER;
reg   [8:0] indvars_iv97_reg_325;
reg   [8:0] indvars_iv97_reg_325_pp0_iter1_reg;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_11001;
reg   [7:0] empty_reg_337;
wire   [8:0] add_ln62_fu_571_p2;
reg   [8:0] add_ln62_reg_1373;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] icmp_ln62_fu_577_p2;
reg   [0:0] icmp_ln62_reg_1378;
reg   [0:0] icmp_ln62_reg_1378_pp0_iter1_reg;
wire  signed [31:0] h_2_fu_613_p2;
reg  signed [31:0] h_2_reg_1382;
wire   [7:0] add_ln62_1_fu_623_p2;
wire   [31:0] h_4_fu_648_p2;
reg   [31:0] h_4_reg_1392;
wire   [7:0] trunc_ln71_fu_679_p1;
reg   [7:0] trunc_ln71_reg_1403;
wire    ap_CS_fsm_state76;
wire   [31:0] sub_fu_683_p2;
reg   [31:0] sub_reg_1415;
wire   [0:0] icmp_ln75_fu_688_p2;
wire   [1:0] trunc_ln78_fu_693_p1;
reg   [1:0] trunc_ln78_reg_1460;
wire   [31:0] add_ln75_fu_706_p2;
reg   [31:0] add_ln75_reg_1465;
wire    ap_CS_fsm_state77;
reg   [31:0] output_index_1_reg_1470;
reg   [31:0] code_2_reg_1477;
wire   [0:0] icmp_ln77_fu_723_p2;
reg   [0:0] icmp_ln77_reg_1487;
wire   [0:0] icmp_ln75_1_fu_718_p2;
reg   [63:0] gmem_addr_1_reg_1491;
wire   [1:0] add_ln78_2_fu_767_p2;
reg   [1:0] add_ln78_2_reg_1497;
wire   [31:0] grp_fu_565_p2;
wire   [31:0] h_6_fu_784_p2;
wire   [31:0] grp_load_fu_562_p1;
reg   [31:0] gmem_addr_1_read_reg_1515;
reg   [31:0] substring_arr_index_1_load_reg_1520;
wire    ap_CS_fsm_state149;
reg   [7:0] c_2_reg_1529;
wire   [7:0] substring_array_q1;
reg   [7:0] substring_array_load_2_reg_1535;
wire    ap_CS_fsm_state151;
wire   [7:0] substring_array_q0;
reg   [7:0] substring_array_load_3_reg_1541;
wire   [31:0] substring_arr_index_fu_824_p2;
reg   [31:0] substring_arr_index_reg_1547;
wire    ap_CS_fsm_state152;
wire   [31:0] h_16_fu_829_p2;
reg   [31:0] h_16_reg_1552;
wire   [31:0] zext_ln19_1_fu_842_p1;
reg   [31:0] zext_ln19_1_reg_1557;
wire   [0:0] icmp_ln15_fu_852_p2;
reg   [0:0] icmp_ln15_reg_1562;
wire   [31:0] zext_ln21_1_fu_872_p1;
reg   [31:0] zext_ln21_1_reg_1569;
wire   [0:0] icmp_ln15_1_fu_882_p2;
reg   [0:0] icmp_ln15_1_reg_1574;
reg   [7:0] substring_array_load_4_reg_1579;
wire   [31:0] zext_ln23_1_fu_895_p1;
reg   [31:0] zext_ln23_1_reg_1584;
wire  signed [31:0] h_21_fu_899_p2;
reg  signed [31:0] h_21_reg_1589;
wire   [0:0] icmp_ln15_2_fu_905_p2;
reg   [0:0] icmp_ln15_2_reg_1594;
wire   [0:0] icmp_ln15_3_fu_910_p2;
reg   [0:0] icmp_ln15_3_reg_1600;
wire  signed [31:0] h_24_fu_955_p2;
reg  signed [31:0] h_24_reg_1607;
wire    ap_CS_fsm_state153;
wire   [31:0] h_38_fu_980_p2;
reg   [31:0] h_38_reg_1612;
wire    ap_CS_fsm_state154;
wire   [0:0] icmp_ln37_1_fu_986_p2;
wire   [0:0] icmp_ln37_2_fu_1000_p2;
wire    ap_CS_fsm_state155;
wire   [30:0] add_ln37_1_fu_1005_p2;
reg   [30:0] add_ln37_1_reg_1626;
reg   [31:0] h_27_reg_1636;
wire  signed [31:0] h_32_fu_1035_p2;
reg  signed [31:0] h_32_reg_1641;
wire   [0:0] icmp_ln15_4_fu_1040_p2;
reg   [0:0] icmp_ln15_4_reg_1646;
wire  signed [31:0] h_35_fu_1095_p2;
reg  signed [31:0] h_35_reg_1654;
wire    ap_CS_fsm_state157;
wire   [31:0] h_37_fu_1120_p2;
reg   [31:0] h_37_reg_1659;
wire    ap_CS_fsm_state158;
wire   [63:0] zext_ln37_4_fu_1126_p1;
reg   [63:0] zext_ln37_4_reg_1664;
wire   [31:0] zext_ln37_6_fu_1134_p1;
reg   [31:0] zext_ln37_6_reg_1669;
wire    ap_CS_fsm_state159;
wire   [0:0] icmp_ln37_3_fu_1138_p2;
reg   [0:0] icmp_ln37_3_reg_1674;
wire   [30:0] add_ln37_2_fu_1143_p2;
reg   [30:0] add_ln37_2_reg_1678;
reg   [63:0] gmem_addr_3_reg_1691;
wire    ap_CS_fsm_state160;
wire   [0:0] icmp_ln40_2_fu_1149_p2;
wire   [31:0] h_8_fu_1222_p2;
wire    ap_CS_fsm_state231;
wire   [31:0] h_11_fu_1238_p2;
wire    ap_CS_fsm_state232;
wire   [31:0] h_15_fu_1284_p2;
reg   [31:0] h_15_reg_1707;
wire    ap_CS_fsm_state233;
wire   [31:0] zext_ln37_1_fu_1295_p1;
reg   [31:0] zext_ln37_1_reg_1712;
wire    ap_CS_fsm_state234;
wire   [0:0] icmp_ln37_fu_1299_p2;
reg   [0:0] icmp_ln37_reg_1717;
wire   [30:0] add_ln37_fu_1305_p2;
reg   [30:0] add_ln37_reg_1721;
reg   [63:0] gmem_addr_2_reg_1734;
wire    ap_CS_fsm_state235;
wire   [0:0] icmp_ln40_fu_1311_p2;
reg    ap_block_state1;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg   [12:0] substring_array_address0;
reg    substring_array_ce0;
reg    substring_array_we0;
reg   [7:0] substring_array_d0;
reg   [12:0] substring_array_address1;
reg    substring_array_ce1;
reg    substring_array_we1;
reg   [8:0] ap_phi_mux_indvars_iv97_phi_fu_329_p4;
wire    ap_block_pp0_stage0;
reg   [7:0] substring_array_load_1_reg_348;
reg    ap_predicate_op719_writeresp_state230;
reg    ap_block_state230;
reg   [7:0] substring_array_load_reg_360;
wire   [7:0] ap_phi_mux_data_assign_load24_phi_fu_374_p4;
reg   [7:0] data_assign_load24_reg_371;
reg   [7:0] ap_phi_mux_data_assign_load26_phi_fu_430_p4;
reg   [31:0] i_reg_381;
reg   [30:0] i_2_reg_392;
wire    ap_CS_fsm_state156;
wire   [0:0] icmp_ln40_1_fu_1046_p2;
reg   [30:0] i_3_reg_403;
reg   [31:0] out_data_1_reg_414;
reg   [7:0] data_assign_load26_reg_426;
reg   [31:0] h_7_reg_437;
reg   [7:0] data_assign_load_reg_448;
reg   [31:0] code_0_lcssa111_reg_461;
reg   [31:0] output_index_0_lcssa109_reg_475;
reg   [31:0] h_9_reg_489;
reg   [31:0] code_0_lcssa112_reg_503;
reg   [31:0] output_index_0_lcssa110_reg_514;
reg   [31:0] h_12_reg_525;
reg   [30:0] i_1_reg_534;
reg   [31:0] out_data_reg_545;
wire   [63:0] indvars_iv97_cast_fu_654_p1;
wire   [63:0] zext_ln81_fu_819_p1;
wire   [63:0] zext_ln37_2_fu_991_p1;
wire   [63:0] zext_ln37_5_fu_1129_p1;
wire   [63:0] zext_ln37_fu_1290_p1;
wire  signed [63:0] sext_ln71_fu_668_p1;
wire  signed [63:0] sext_ln78_fu_751_p1;
wire  signed [63:0] sext_ln103_fu_1185_p1;
wire  signed [63:0] sext_ln115_fu_1343_p1;
reg   [31:0] substring_arr_index_1_fu_152;
reg   [31:0] output_index_fu_156;
wire   [31:0] output_index_2_fu_1154_p2;
reg   [31:0] code_1_fu_160;
wire   [31:0] code_fu_1195_p2;
reg   [7:0] c_fu_164;
wire   [7:0] c_1_fu_806_p1;
reg   [7:0] ap_sig_allocacmp_c_2;
wire    ap_CS_fsm_state150;
wire   [7:0] h_fu_583_p2;
wire   [7:0] h_1_fu_593_p0;
wire   [31:0] h_1_fu_593_p2;
wire   [18:0] lshr_ln_fu_599_p4;
wire   [31:0] zext_ln26_fu_609_p1;
wire   [7:0] trunc_ln62_fu_619_p1;
wire   [31:0] h_3_fu_629_p2;
wire   [16:0] lshr_ln1_fu_634_p4;
wire   [31:0] zext_ln28_fu_644_p1;
wire   [61:0] trunc_ln71_1_fu_659_p4;
wire   [63:0] zext_ln78_fu_732_p1;
wire   [63:0] add_ln78_fu_736_p2;
wire   [61:0] trunc_ln78_2_fu_741_p4;
wire   [1:0] trunc_ln78_1_fu_728_p1;
wire   [1:0] add_ln78_1_fu_761_p2;
wire   [23:0] shl_ln_fu_772_p3;
wire   [31:0] zext_ln19_fu_780_p1;
wire   [4:0] shl_ln2_fu_790_p3;
wire   [31:0] zext_ln78_1_fu_797_p1;
wire   [31:0] lshr_ln78_fu_801_p2;
wire   [23:0] shl_ln19_1_fu_835_p3;
wire   [31:0] h_17_fu_846_p2;
wire   [15:0] shl_ln21_1_fu_865_p3;
wire   [31:0] h_18_fu_857_p3;
wire   [31:0] h_19_fu_876_p2;
wire   [31:0] h_20_fu_887_p3;
wire   [0:0] or_ln15_1_fu_924_p2;
wire   [0:0] or_ln15_fu_920_p2;
wire   [0:0] or_ln15_2_fu_928_p2;
wire   [31:0] h_22_fu_915_p2;
wire   [31:0] h_23_fu_934_p3;
wire   [18:0] lshr_ln26_2_fu_941_p4;
wire   [31:0] zext_ln26_2_fu_951_p1;
wire   [31:0] h_25_fu_961_p2;
wire   [16:0] lshr_ln28_2_fu_966_p4;
wire   [31:0] zext_ln28_2_fu_976_p1;
wire   [31:0] zext_ln37_3_fu_996_p1;
wire   [31:0] h_28_fu_1011_p2;
wire   [31:0] h_29_fu_1016_p3;
wire   [31:0] h_30_fu_1023_p2;
wire   [31:0] h_31_fu_1028_p3;
wire   [0:0] or_ln15_4_fu_1064_p2;
wire   [0:0] or_ln15_3_fu_1060_p2;
wire   [0:0] or_ln15_5_fu_1068_p2;
wire   [31:0] h_33_fu_1055_p2;
wire   [31:0] h_34_fu_1074_p3;
wire   [18:0] lshr_ln26_3_fu_1081_p4;
wire   [31:0] zext_ln26_3_fu_1091_p1;
wire   [31:0] h_36_fu_1101_p2;
wire   [16:0] lshr_ln28_3_fu_1106_p4;
wire   [31:0] zext_ln28_3_fu_1116_p1;
wire   [33:0] shl_ln4_fu_1159_p3;
wire   [63:0] zext_ln103_fu_1166_p1;
wire   [63:0] add_ln103_fu_1170_p2;
wire   [61:0] trunc_ln4_fu_1175_p4;
wire   [15:0] shl_ln1_fu_1210_p3;
wire   [31:0] zext_ln21_fu_1218_p1;
wire   [31:0] zext_ln23_fu_1228_p1;
wire  signed [31:0] h_11_fu_1238_p0;
wire   [18:0] lshr_ln26_1_fu_1244_p4;
wire   [31:0] zext_ln26_1_fu_1254_p1;
wire  signed [31:0] h_14_fu_1264_p0;
wire   [31:0] h_14_fu_1264_p2;
wire   [16:0] lshr_ln28_1_fu_1270_p4;
wire   [31:0] zext_ln28_1_fu_1280_p1;
wire   [33:0] shl_ln3_fu_1316_p3;
wire   [63:0] zext_ln115_fu_1324_p1;
wire   [63:0] add_ln115_fu_1328_p2;
wire   [61:0] trunc_ln3_fu_1333_p4;
reg   [302:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [31:0] h_1_fu_593_p00;
reg    ap_condition_677;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_rst_reg_2 = 1'b1;
#0 ap_rst_reg_1 = 1'b1;
#0 ap_rst_n_inv = 1'b1;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 303'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

LZW_encoding_HW_table_r #(
    .DataWidth( 32 ),
    .AddressRange( 8192 ),
    .AddressWidth( 13 ))
table_r_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(table_r_address0),
    .ce0(table_r_ce0),
    .we0(table_r_we0),
    .d0(table_r_d0),
    .q0(table_r_q0)
);

LZW_encoding_HW_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .data_in(data_in),
    .len(len),
    .data_out(data_out),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_continue(ap_continue),
    .ap_idle(ap_idle)
);

LZW_encoding_HW_gmem_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 64 ),
    .USER_MAXREQS( 69 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_GMEM_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_GMEM_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_GMEM_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_GMEM_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_GMEM_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_GMEM_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_GMEM_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_GMEM_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_GMEM_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_GMEM_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_GMEM_CACHE_VALUE ))
gmem_m_axi_U(
    .AWVALID(m_axi_gmem_AWVALID),
    .AWREADY(m_axi_gmem_AWREADY),
    .AWADDR(m_axi_gmem_AWADDR),
    .AWID(m_axi_gmem_AWID),
    .AWLEN(m_axi_gmem_AWLEN),
    .AWSIZE(m_axi_gmem_AWSIZE),
    .AWBURST(m_axi_gmem_AWBURST),
    .AWLOCK(m_axi_gmem_AWLOCK),
    .AWCACHE(m_axi_gmem_AWCACHE),
    .AWPROT(m_axi_gmem_AWPROT),
    .AWQOS(m_axi_gmem_AWQOS),
    .AWREGION(m_axi_gmem_AWREGION),
    .AWUSER(m_axi_gmem_AWUSER),
    .WVALID(m_axi_gmem_WVALID),
    .WREADY(m_axi_gmem_WREADY),
    .WDATA(m_axi_gmem_WDATA),
    .WSTRB(m_axi_gmem_WSTRB),
    .WLAST(m_axi_gmem_WLAST),
    .WID(m_axi_gmem_WID),
    .WUSER(m_axi_gmem_WUSER),
    .ARVALID(m_axi_gmem_ARVALID),
    .ARREADY(m_axi_gmem_ARREADY),
    .ARADDR(m_axi_gmem_ARADDR),
    .ARID(m_axi_gmem_ARID),
    .ARLEN(m_axi_gmem_ARLEN),
    .ARSIZE(m_axi_gmem_ARSIZE),
    .ARBURST(m_axi_gmem_ARBURST),
    .ARLOCK(m_axi_gmem_ARLOCK),
    .ARCACHE(m_axi_gmem_ARCACHE),
    .ARPROT(m_axi_gmem_ARPROT),
    .ARQOS(m_axi_gmem_ARQOS),
    .ARREGION(m_axi_gmem_ARREGION),
    .ARUSER(m_axi_gmem_ARUSER),
    .RVALID(m_axi_gmem_RVALID),
    .RREADY(m_axi_gmem_RREADY),
    .RDATA(m_axi_gmem_RDATA),
    .RLAST(m_axi_gmem_RLAST),
    .RID(m_axi_gmem_RID),
    .RUSER(m_axi_gmem_RUSER),
    .RRESP(m_axi_gmem_RRESP),
    .BVALID(m_axi_gmem_BVALID),
    .BREADY(m_axi_gmem_BREADY),
    .BRESP(m_axi_gmem_BRESP),
    .BID(m_axi_gmem_BID),
    .BUSER(m_axi_gmem_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(gmem_ARVALID),
    .I_ARREADY(gmem_ARREADY),
    .I_ARADDR(gmem_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(32'd1),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(gmem_RVALID),
    .I_RREADY(gmem_RREADY),
    .I_RDATA(gmem_RDATA),
    .I_RID(gmem_RID),
    .I_RUSER(gmem_RUSER),
    .I_RRESP(gmem_RRESP),
    .I_RLAST(gmem_RLAST),
    .I_AWVALID(gmem_AWVALID),
    .I_AWREADY(gmem_AWREADY),
    .I_AWADDR(gmem_AWADDR),
    .I_AWID(1'd0),
    .I_AWLEN(32'd1),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(gmem_WVALID),
    .I_WREADY(gmem_WREADY),
    .I_WDATA(gmem_WDATA),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd15),
    .I_BVALID(gmem_BVALID),
    .I_BREADY(gmem_BREADY),
    .I_BRESP(gmem_BRESP),
    .I_BID(gmem_BID),
    .I_BUSER(gmem_BUSER)
);

LZW_encoding_HW_substring_array #(
    .DataWidth( 8 ),
    .AddressRange( 8192 ),
    .AddressWidth( 13 ))
substring_array_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(substring_array_address0),
    .ce0(substring_array_ce0),
    .we0(substring_array_we0),
    .d0(substring_array_d0),
    .q0(substring_array_q0),
    .address1(substring_array_address1),
    .ce1(substring_array_ce1),
    .we1(substring_array_we1),
    .d1(c_2_reg_1529),
    .q1(substring_array_q1)
);

LZW_encoding_HW_mul_8ns_32ns_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_8ns_32ns_32_1_1_U1(
    .din0(h_1_fu_593_p0),
    .din1(32'd1540483477),
    .dout(h_1_fu_593_p2)
);

LZW_encoding_HW_mul_32s_32ns_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32ns_32_1_1_U2(
    .din0(h_2_reg_1382),
    .din1(32'd1540483477),
    .dout(h_3_fu_629_p2)
);

LZW_encoding_HW_mul_32s_32ns_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32ns_32_1_1_U3(
    .din0(h_21_reg_1589),
    .din1(32'd1540483477),
    .dout(h_22_fu_915_p2)
);

LZW_encoding_HW_mul_32s_32ns_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32ns_32_1_1_U4(
    .din0(h_24_reg_1607),
    .din1(32'd1540483477),
    .dout(h_25_fu_961_p2)
);

LZW_encoding_HW_mul_32s_32ns_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32ns_32_1_1_U5(
    .din0(h_32_reg_1641),
    .din1(32'd1540483477),
    .dout(h_33_fu_1055_p2)
);

LZW_encoding_HW_mul_32s_32ns_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32ns_32_1_1_U6(
    .din0(h_35_reg_1654),
    .din1(32'd1540483477),
    .dout(h_36_fu_1101_p2)
);

LZW_encoding_HW_mul_32s_32ns_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32ns_32_1_1_U7(
    .din0(h_11_fu_1238_p0),
    .din1(32'd1540483477),
    .dout(h_11_fu_1238_p2)
);

LZW_encoding_HW_mul_32s_32ns_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32ns_32_1_1_U8(
    .din0(h_14_fu_1264_p0),
    .din1(32'd1540483477),
    .dout(h_14_fu_1264_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state305))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    ap_rst_n_inv <= ap_rst_reg_1;
end

always @ (posedge ap_clk) begin
    ap_rst_reg_1 <= ap_rst_reg_2;
end

always @ (posedge ap_clk) begin
    ap_rst_reg_2 <= ~ap_rst_n;
end

always @ (posedge ap_clk) begin
    if (((icmp_ln75_fu_688_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state76))) begin
        code_0_lcssa111_reg_461 <= 32'd256;
    end else if ((1'b1 == ap_CS_fsm_state231)) begin
        code_0_lcssa111_reg_461 <= code_2_reg_1477;
    end else if (((grp_load_fu_562_p1 == 32'd1) & (icmp_ln75_1_fu_718_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state77))) begin
        code_0_lcssa111_reg_461 <= code_1_fu_160;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state232)) begin
        code_0_lcssa112_reg_503 <= code_0_lcssa111_reg_461;
    end else if ((~(grp_load_fu_562_p1 == 32'd1) & ~(grp_load_fu_562_p1 == 32'd2) & ~(grp_load_fu_562_p1 == 32'd4) & ~(grp_load_fu_562_p1 == 32'd3) & (icmp_ln75_1_fu_718_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state77))) begin
        code_0_lcssa112_reg_503 <= code_1_fu_160;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln75_fu_688_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state76))) begin
        code_1_fu_160 <= 32'd256;
    end else if (((1'b1 == ap_CS_fsm_state160) & ((icmp_ln40_2_fu_1149_p2 == 1'd1) | (icmp_ln37_3_reg_1674 == 1'd0)))) begin
        code_1_fu_160 <= code_fu_1195_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_predicate_op719_writeresp_state230 == 1'b1) & (gmem_BVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state230))) begin
        data_assign_load24_reg_371 <= ap_phi_mux_data_assign_load26_phi_fu_430_p4;
    end else if (((icmp_ln75_fu_688_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state76))) begin
        data_assign_load24_reg_371 <= trunc_ln71_reg_1403;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln40_1_fu_1046_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state156))) begin
        data_assign_load26_reg_426 <= substring_array_load_4_reg_1579;
    end else if ((~((ap_predicate_op719_writeresp_state230 == 1'b1) & (gmem_BVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state230) & ((icmp_ln37_1_reg_1618 == 1'd0) | (icmp_ln37_2_reg_1622 == 1'd0)))) begin
        data_assign_load26_reg_426 <= c_2_reg_1529;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln75_fu_688_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state76))) begin
        data_assign_load_reg_448 <= trunc_ln71_reg_1403;
    end else if ((1'b1 == ap_CS_fsm_state231)) begin
        data_assign_load_reg_448 <= data_assign_load24_reg_371;
    end else if (((grp_load_fu_562_p1 == 32'd1) & (icmp_ln75_1_fu_718_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state77))) begin
        data_assign_load_reg_448 <= ap_phi_mux_data_assign_load24_phi_fu_374_p4;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        empty_reg_337 <= 8'd0;
    end else if (((icmp_ln62_fu_577_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        empty_reg_337 <= add_ln62_1_fu_623_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state232)) begin
        h_12_reg_525 <= h_11_fu_1238_p2;
    end else if ((~(grp_load_fu_562_p1 == 32'd1) & ~(grp_load_fu_562_p1 == 32'd2) & ~(grp_load_fu_562_p1 == 32'd4) & ~(grp_load_fu_562_p1 == 32'd3) & (icmp_ln75_1_fu_718_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state77))) begin
        h_12_reg_525 <= grp_fu_565_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state77)) begin
        if ((1'b1 == ap_condition_677)) begin
            h_7_reg_437 <= h_6_fu_784_p2;
        end else if (((grp_load_fu_562_p1 == 32'd2) & (icmp_ln75_1_fu_718_p2 == 1'd1))) begin
            h_7_reg_437 <= 32'd1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state231)) begin
        h_9_reg_489 <= h_8_fu_1222_p2;
    end else if ((((icmp_ln75_fu_688_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state76)) | ((grp_load_fu_562_p1 == 32'd1) & (icmp_ln75_1_fu_718_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state77)))) begin
        h_9_reg_489 <= 32'd2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state233)) begin
        i_1_reg_534 <= 31'd0;
    end else if (((icmp_ln40_fu_1311_p2 == 1'd0) & (icmp_ln37_reg_1717 == 1'd1) & (1'b1 == ap_CS_fsm_state235))) begin
        i_1_reg_534 <= add_ln37_reg_1721;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln37_1_fu_986_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state154))) begin
        i_2_reg_392 <= 31'd0;
    end else if (((icmp_ln40_1_fu_1046_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state156))) begin
        i_2_reg_392 <= add_ln37_1_reg_1626;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state158)) begin
        i_3_reg_403 <= 31'd0;
    end else if (((icmp_ln40_2_fu_1149_p2 == 1'd0) & (icmp_ln37_3_reg_1674 == 1'd1) & (1'b1 == ap_CS_fsm_state160))) begin
        i_3_reg_403 <= add_ln37_2_reg_1678;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_predicate_op719_writeresp_state230 == 1'b1) & (gmem_BVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state230))) begin
        i_reg_381 <= add_ln75_reg_1465;
    end else if (((icmp_ln75_fu_688_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state76))) begin
        i_reg_381 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvars_iv97_reg_325 <= 9'd0;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln62_reg_1378 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvars_iv97_reg_325 <= add_ln62_reg_1373;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln37_3_fu_1138_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state159))) begin
        out_data_1_reg_414 <= 32'd4294967295;
    end else if (((icmp_ln40_2_fu_1149_p2 == 1'd1) & (icmp_ln37_3_reg_1674 == 1'd1) & (1'b1 == ap_CS_fsm_state160))) begin
        out_data_1_reg_414 <= zext_ln37_6_reg_1669;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln37_fu_1299_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state234))) begin
        out_data_reg_545 <= 32'd4294967295;
    end else if (((icmp_ln40_fu_1311_p2 == 1'd1) & (icmp_ln37_reg_1717 == 1'd1) & (1'b1 == ap_CS_fsm_state235))) begin
        out_data_reg_545 <= zext_ln37_1_reg_1712;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln75_fu_688_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state76))) begin
        output_index_0_lcssa109_reg_475 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state231)) begin
        output_index_0_lcssa109_reg_475 <= output_index_1_reg_1470;
    end else if (((grp_load_fu_562_p1 == 32'd1) & (icmp_ln75_1_fu_718_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state77))) begin
        output_index_0_lcssa109_reg_475 <= output_index_fu_156;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state232)) begin
        output_index_0_lcssa110_reg_514 <= output_index_0_lcssa109_reg_475;
    end else if ((~(grp_load_fu_562_p1 == 32'd1) & ~(grp_load_fu_562_p1 == 32'd2) & ~(grp_load_fu_562_p1 == 32'd4) & ~(grp_load_fu_562_p1 == 32'd3) & (icmp_ln75_1_fu_718_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state77))) begin
        output_index_0_lcssa110_reg_514 <= output_index_fu_156;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln75_fu_688_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state76))) begin
        output_index_fu_156 <= 32'd0;
    end else if (((1'b1 == ap_CS_fsm_state160) & ((icmp_ln40_2_fu_1149_p2 == 1'd1) | (icmp_ln37_3_reg_1674 == 1'd0)))) begin
        output_index_fu_156 <= output_index_2_fu_1154_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln40_1_fu_1046_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state156))) begin
        substring_arr_index_1_fu_152 <= substring_arr_index_reg_1547;
    end else if (((~((ap_predicate_op719_writeresp_state230 == 1'b1) & (gmem_BVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state230) & ((icmp_ln37_1_reg_1618 == 1'd0) | (icmp_ln37_2_reg_1622 == 1'd0))) | ((icmp_ln75_fu_688_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state76)))) begin
        substring_arr_index_1_fu_152 <= 32'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln37_1_reg_1618 == 1'd1) & (1'b1 == ap_CS_fsm_state155))) begin
        add_ln37_1_reg_1626 <= add_ln37_1_fu_1005_p2;
        icmp_ln37_2_reg_1622 <= icmp_ln37_2_fu_1000_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state159)) begin
        add_ln37_2_reg_1678 <= add_ln37_2_fu_1143_p2;
        icmp_ln37_3_reg_1674 <= icmp_ln37_3_fu_1138_p2;
        zext_ln37_6_reg_1669[30 : 0] <= zext_ln37_6_fu_1134_p1[30 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state234)) begin
        add_ln37_reg_1721 <= add_ln37_fu_1305_p2;
        icmp_ln37_reg_1717 <= icmp_ln37_fu_1299_p2;
        zext_ln37_1_reg_1712[30 : 0] <= zext_ln37_1_fu_1295_p1[30 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln62_reg_1373 <= add_ln62_fu_571_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state77)) begin
        add_ln75_reg_1465 <= add_ln75_fu_706_p2;
        code_2_reg_1477 <= code_1_fu_160;
        output_index_1_reg_1470 <= output_index_fu_156;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln75_1_fu_718_p2 == 1'd0) & (icmp_ln77_fu_723_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state77))) begin
        add_ln78_2_reg_1497 <= add_ln78_2_fu_767_p2;
        gmem_addr_1_reg_1491 <= sext_ln78_fu_751_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state149)) begin
        c_2_reg_1529 <= ap_sig_allocacmp_c_2;
        substring_arr_index_1_load_reg_1520 <= substring_arr_index_1_fu_152;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln77_reg_1487 == 1'd0) & (1'b1 == ap_CS_fsm_state149))) begin
        c_fu_164 <= c_1_fu_806_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state148)) begin
        gmem_addr_1_read_reg_1515 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state235) & ((icmp_ln40_fu_1311_p2 == 1'd1) | (icmp_ln37_reg_1717 == 1'd0)))) begin
        gmem_addr_2_reg_1734 <= sext_ln115_fu_1343_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state160) & ((icmp_ln40_2_fu_1149_p2 == 1'd1) | (icmp_ln37_3_reg_1674 == 1'd0)))) begin
        gmem_addr_3_reg_1691 <= sext_ln103_fu_1185_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state233)) begin
        h_15_reg_1707 <= h_15_fu_1284_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state152)) begin
        h_16_reg_1552 <= h_16_fu_829_p2;
        h_21_reg_1589 <= h_21_fu_899_p2;
        icmp_ln15_1_reg_1574 <= icmp_ln15_1_fu_882_p2;
        icmp_ln15_2_reg_1594 <= icmp_ln15_2_fu_905_p2;
        icmp_ln15_3_reg_1600 <= icmp_ln15_3_fu_910_p2;
        icmp_ln15_reg_1562 <= icmp_ln15_fu_852_p2;
        substring_arr_index_reg_1547 <= substring_arr_index_fu_824_p2;
        substring_array_load_4_reg_1579 <= substring_array_q1;
        zext_ln19_1_reg_1557[23 : 16] <= zext_ln19_1_fu_842_p1[23 : 16];
        zext_ln21_1_reg_1569[15 : 8] <= zext_ln21_1_fu_872_p1[15 : 8];
        zext_ln23_1_reg_1584[7 : 0] <= zext_ln23_1_fu_895_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state153)) begin
        h_24_reg_1607 <= h_24_fu_955_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state155) & ((icmp_ln37_2_fu_1000_p2 == 1'd0) | (icmp_ln37_1_reg_1618 == 1'd0)))) begin
        h_27_reg_1636 <= grp_fu_565_p2;
        h_32_reg_1641 <= h_32_fu_1035_p2;
        icmp_ln15_4_reg_1646 <= icmp_ln15_4_fu_1040_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln62_fu_577_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        h_2_reg_1382 <= h_2_fu_613_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state157)) begin
        h_35_reg_1654 <= h_35_fu_1095_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state158)) begin
        h_37_reg_1659 <= h_37_fu_1120_p2;
        zext_ln37_4_reg_1664[31 : 0] <= zext_ln37_4_fu_1126_p1[31 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state154)) begin
        h_38_reg_1612 <= h_38_fu_980_p2;
        icmp_ln37_1_reg_1618 <= icmp_ln37_1_fu_986_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln62_reg_1378 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        h_4_reg_1392 <= h_4_fu_648_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln62_reg_1378 <= icmp_ln62_fu_577_p2;
        icmp_ln62_reg_1378_pp0_iter1_reg <= icmp_ln62_reg_1378;
        indvars_iv97_reg_325_pp0_iter1_reg <= indvars_iv97_reg_325;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln75_1_fu_718_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state77))) begin
        icmp_ln77_reg_1487 <= icmp_ln77_fu_723_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state76)) begin
        sub_reg_1415 <= sub_fu_683_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_predicate_op719_writeresp_state230 == 1'b1) & (gmem_BVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state230))) begin
        substring_array_load_1_reg_348 <= substring_array_load_3_reg_1541;
        substring_array_load_reg_360 <= substring_array_load_2_reg_1535;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state151)) begin
        substring_array_load_2_reg_1535 <= substring_array_q1;
        substring_array_load_3_reg_1541 <= substring_array_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state75)) begin
        trunc_ln71_reg_1403 <= trunc_ln71_fu_679_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln75_fu_688_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state76))) begin
        trunc_ln78_reg_1460 <= trunc_ln78_fu_693_p1;
    end
end

always @ (*) begin
    if ((icmp_ln62_fu_577_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state305))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state230) & ((icmp_ln37_1_reg_1618 == 1'd0) | (icmp_ln37_2_reg_1622 == 1'd0)))) begin
        ap_phi_mux_data_assign_load26_phi_fu_430_p4 = c_2_reg_1529;
    end else begin
        ap_phi_mux_data_assign_load26_phi_fu_430_p4 = data_assign_load26_reg_426;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln62_reg_1378 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_indvars_iv97_phi_fu_329_p4 = add_ln62_reg_1373;
    end else begin
        ap_phi_mux_indvars_iv97_phi_fu_329_p4 = indvars_iv97_reg_325;
    end
end

always @ (*) begin
    if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state305))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln77_reg_1487 == 1'd0) & (1'b1 == ap_CS_fsm_state149))) begin
        ap_sig_allocacmp_c_2 = c_1_fu_806_p1;
    end else begin
        ap_sig_allocacmp_c_2 = c_fu_164;
    end
end

always @ (*) begin
    if ((gmem_ARREADY == 1'b1)) begin
        if ((1'b1 == ap_CS_fsm_state78)) begin
            gmem_ARADDR = gmem_addr_1_reg_1491;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            gmem_ARADDR = sext_ln71_fu_668_p1;
        end else begin
            gmem_ARADDR = 'bx;
        end
    end else begin
        gmem_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state78)) | ((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state5)))) begin
        gmem_ARVALID = 1'b1;
    end else begin
        gmem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_AWREADY == 1'b1)) begin
        if ((1'b1 == ap_CS_fsm_state236)) begin
            gmem_AWADDR = gmem_addr_2_reg_1734;
        end else if ((1'b1 == ap_CS_fsm_state161)) begin
            gmem_AWADDR = gmem_addr_3_reg_1691;
        end else begin
            gmem_AWADDR = 'bx;
        end
    end else begin
        gmem_AWADDR = 'bx;
    end
end

always @ (*) begin
    if ((((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state236)) | ((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state161)))) begin
        gmem_AWVALID = 1'b1;
    end else begin
        gmem_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_predicate_op719_writeresp_state230 == 1'b1) & (gmem_BVALID == 1'b0)) & (ap_predicate_op719_writeresp_state230 == 1'b1) & (1'b1 == ap_CS_fsm_state230)) | ((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state305)))) begin
        gmem_BREADY = 1'b1;
    end else begin
        gmem_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state148)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state75)))) begin
        gmem_RREADY = 1'b1;
    end else begin
        gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state237)) begin
        gmem_WDATA = out_data_reg_545;
    end else if ((1'b1 == ap_CS_fsm_state162)) begin
        gmem_WDATA = out_data_1_reg_414;
    end else begin
        gmem_WDATA = 'bx;
    end
end

always @ (*) begin
    if ((((gmem_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state237)) | ((gmem_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state162)))) begin
        gmem_WVALID = 1'b1;
    end else begin
        gmem_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state78) | (1'b1 == ap_CS_fsm_state5))) begin
        gmem_blk_n_AR = m_axi_gmem_ARREADY;
    end else begin
        gmem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state236) | (1'b1 == ap_CS_fsm_state161))) begin
        gmem_blk_n_AW = m_axi_gmem_AWREADY;
    end else begin
        gmem_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state305) | ((1'b1 == ap_CS_fsm_state230) & ((icmp_ln37_1_reg_1618 == 1'd0) | (icmp_ln37_2_reg_1622 == 1'd0))))) begin
        gmem_blk_n_B = m_axi_gmem_BVALID;
    end else begin
        gmem_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state148) | (1'b1 == ap_CS_fsm_state75))) begin
        gmem_blk_n_R = m_axi_gmem_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state237) | (1'b1 == ap_CS_fsm_state162))) begin
        gmem_blk_n_W = m_axi_gmem_WREADY;
    end else begin
        gmem_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state150)) begin
        substring_array_address0 = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state149)) begin
        substring_array_address0 = zext_ln81_fu_819_p1;
    end else if ((1'b1 == ap_CS_fsm_state76)) begin
        substring_array_address0 = 64'd0;
    end else begin
        substring_array_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state160) | (1'b1 == ap_CS_fsm_state151))) begin
        substring_array_address1 = 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state150)) begin
        substring_array_address1 = 64'd2;
    end else begin
        substring_array_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state149) | (1'b1 == ap_CS_fsm_state76) | (1'b1 == ap_CS_fsm_state150))) begin
        substring_array_ce0 = 1'b1;
    end else begin
        substring_array_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state160) | (1'b1 == ap_CS_fsm_state151) | (1'b1 == ap_CS_fsm_state150))) begin
        substring_array_ce1 = 1'b1;
    end else begin
        substring_array_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state149)) begin
        substring_array_d0 = ap_sig_allocacmp_c_2;
    end else if ((1'b1 == ap_CS_fsm_state76)) begin
        substring_array_d0 = trunc_ln71_reg_1403;
    end else begin
        substring_array_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state149) | (1'b1 == ap_CS_fsm_state76))) begin
        substring_array_we0 = 1'b1;
    end else begin
        substring_array_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state160) & ((icmp_ln40_2_fu_1149_p2 == 1'd1) | (icmp_ln37_3_reg_1674 == 1'd0)))) begin
        substring_array_we1 = 1'b1;
    end else begin
        substring_array_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state234)) begin
        table_r_address0 = zext_ln37_fu_1290_p1;
    end else if ((1'b1 == ap_CS_fsm_state160)) begin
        table_r_address0 = zext_ln37_4_reg_1664;
    end else if ((1'b1 == ap_CS_fsm_state159)) begin
        table_r_address0 = zext_ln37_5_fu_1129_p1;
    end else if ((1'b1 == ap_CS_fsm_state155)) begin
        table_r_address0 = zext_ln37_2_fu_991_p1;
    end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        table_r_address0 = indvars_iv97_cast_fu_654_p1;
    end else begin
        table_r_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state234) | (1'b1 == ap_CS_fsm_state160) | (1'b1 == ap_CS_fsm_state159) | (1'b1 == ap_CS_fsm_state155) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        table_r_ce0 = 1'b1;
    end else begin
        table_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state160)) begin
        table_r_d0 = h_38_reg_1612;
    end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        table_r_d0 = h_4_reg_1392;
    end else begin
        table_r_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln62_reg_1378_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((1'b1 == ap_CS_fsm_state160) & ((icmp_ln40_2_fu_1149_p2 == 1'd1) | (icmp_ln37_3_reg_1674 == 1'd0))))) begin
        table_r_we0 = 1'b1;
    end else begin
        table_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln62_fu_577_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln62_fu_577_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state75))) begin
                ap_NS_fsm = ap_ST_fsm_state76;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state75;
            end
        end
        ap_ST_fsm_state76 : begin
            if (((icmp_ln75_fu_688_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state76))) begin
                ap_NS_fsm = ap_ST_fsm_state77;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state232;
            end
        end
        ap_ST_fsm_state77 : begin
            if ((~(grp_load_fu_562_p1 == 32'd1) & ~(grp_load_fu_562_p1 == 32'd2) & ~(grp_load_fu_562_p1 == 32'd4) & ~(grp_load_fu_562_p1 == 32'd3) & (icmp_ln75_1_fu_718_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state77))) begin
                ap_NS_fsm = ap_ST_fsm_state233;
            end else if (((grp_load_fu_562_p1 == 32'd1) & (icmp_ln75_1_fu_718_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state77))) begin
                ap_NS_fsm = ap_ST_fsm_state232;
            end else if (((1'b1 == ap_CS_fsm_state77) & ((((grp_load_fu_562_p1 == 32'd2) & (icmp_ln75_1_fu_718_p2 == 1'd1)) | ((grp_load_fu_562_p1 == 32'd3) & (icmp_ln75_1_fu_718_p2 == 1'd1))) | ((grp_load_fu_562_p1 == 32'd4) & (icmp_ln75_1_fu_718_p2 == 1'd1))))) begin
                ap_NS_fsm = ap_ST_fsm_state231;
            end else if (((icmp_ln75_1_fu_718_p2 == 1'd0) & (icmp_ln77_fu_723_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state77))) begin
                ap_NS_fsm = ap_ST_fsm_state149;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state78;
            end
        end
        ap_ST_fsm_state78 : begin
            if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state78))) begin
                ap_NS_fsm = ap_ST_fsm_state79;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state78;
            end
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        ap_ST_fsm_state93 : begin
            ap_NS_fsm = ap_ST_fsm_state94;
        end
        ap_ST_fsm_state94 : begin
            ap_NS_fsm = ap_ST_fsm_state95;
        end
        ap_ST_fsm_state95 : begin
            ap_NS_fsm = ap_ST_fsm_state96;
        end
        ap_ST_fsm_state96 : begin
            ap_NS_fsm = ap_ST_fsm_state97;
        end
        ap_ST_fsm_state97 : begin
            ap_NS_fsm = ap_ST_fsm_state98;
        end
        ap_ST_fsm_state98 : begin
            ap_NS_fsm = ap_ST_fsm_state99;
        end
        ap_ST_fsm_state99 : begin
            ap_NS_fsm = ap_ST_fsm_state100;
        end
        ap_ST_fsm_state100 : begin
            ap_NS_fsm = ap_ST_fsm_state101;
        end
        ap_ST_fsm_state101 : begin
            ap_NS_fsm = ap_ST_fsm_state102;
        end
        ap_ST_fsm_state102 : begin
            ap_NS_fsm = ap_ST_fsm_state103;
        end
        ap_ST_fsm_state103 : begin
            ap_NS_fsm = ap_ST_fsm_state104;
        end
        ap_ST_fsm_state104 : begin
            ap_NS_fsm = ap_ST_fsm_state105;
        end
        ap_ST_fsm_state105 : begin
            ap_NS_fsm = ap_ST_fsm_state106;
        end
        ap_ST_fsm_state106 : begin
            ap_NS_fsm = ap_ST_fsm_state107;
        end
        ap_ST_fsm_state107 : begin
            ap_NS_fsm = ap_ST_fsm_state108;
        end
        ap_ST_fsm_state108 : begin
            ap_NS_fsm = ap_ST_fsm_state109;
        end
        ap_ST_fsm_state109 : begin
            ap_NS_fsm = ap_ST_fsm_state110;
        end
        ap_ST_fsm_state110 : begin
            ap_NS_fsm = ap_ST_fsm_state111;
        end
        ap_ST_fsm_state111 : begin
            ap_NS_fsm = ap_ST_fsm_state112;
        end
        ap_ST_fsm_state112 : begin
            ap_NS_fsm = ap_ST_fsm_state113;
        end
        ap_ST_fsm_state113 : begin
            ap_NS_fsm = ap_ST_fsm_state114;
        end
        ap_ST_fsm_state114 : begin
            ap_NS_fsm = ap_ST_fsm_state115;
        end
        ap_ST_fsm_state115 : begin
            ap_NS_fsm = ap_ST_fsm_state116;
        end
        ap_ST_fsm_state116 : begin
            ap_NS_fsm = ap_ST_fsm_state117;
        end
        ap_ST_fsm_state117 : begin
            ap_NS_fsm = ap_ST_fsm_state118;
        end
        ap_ST_fsm_state118 : begin
            ap_NS_fsm = ap_ST_fsm_state119;
        end
        ap_ST_fsm_state119 : begin
            ap_NS_fsm = ap_ST_fsm_state120;
        end
        ap_ST_fsm_state120 : begin
            ap_NS_fsm = ap_ST_fsm_state121;
        end
        ap_ST_fsm_state121 : begin
            ap_NS_fsm = ap_ST_fsm_state122;
        end
        ap_ST_fsm_state122 : begin
            ap_NS_fsm = ap_ST_fsm_state123;
        end
        ap_ST_fsm_state123 : begin
            ap_NS_fsm = ap_ST_fsm_state124;
        end
        ap_ST_fsm_state124 : begin
            ap_NS_fsm = ap_ST_fsm_state125;
        end
        ap_ST_fsm_state125 : begin
            ap_NS_fsm = ap_ST_fsm_state126;
        end
        ap_ST_fsm_state126 : begin
            ap_NS_fsm = ap_ST_fsm_state127;
        end
        ap_ST_fsm_state127 : begin
            ap_NS_fsm = ap_ST_fsm_state128;
        end
        ap_ST_fsm_state128 : begin
            ap_NS_fsm = ap_ST_fsm_state129;
        end
        ap_ST_fsm_state129 : begin
            ap_NS_fsm = ap_ST_fsm_state130;
        end
        ap_ST_fsm_state130 : begin
            ap_NS_fsm = ap_ST_fsm_state131;
        end
        ap_ST_fsm_state131 : begin
            ap_NS_fsm = ap_ST_fsm_state132;
        end
        ap_ST_fsm_state132 : begin
            ap_NS_fsm = ap_ST_fsm_state133;
        end
        ap_ST_fsm_state133 : begin
            ap_NS_fsm = ap_ST_fsm_state134;
        end
        ap_ST_fsm_state134 : begin
            ap_NS_fsm = ap_ST_fsm_state135;
        end
        ap_ST_fsm_state135 : begin
            ap_NS_fsm = ap_ST_fsm_state136;
        end
        ap_ST_fsm_state136 : begin
            ap_NS_fsm = ap_ST_fsm_state137;
        end
        ap_ST_fsm_state137 : begin
            ap_NS_fsm = ap_ST_fsm_state138;
        end
        ap_ST_fsm_state138 : begin
            ap_NS_fsm = ap_ST_fsm_state139;
        end
        ap_ST_fsm_state139 : begin
            ap_NS_fsm = ap_ST_fsm_state140;
        end
        ap_ST_fsm_state140 : begin
            ap_NS_fsm = ap_ST_fsm_state141;
        end
        ap_ST_fsm_state141 : begin
            ap_NS_fsm = ap_ST_fsm_state142;
        end
        ap_ST_fsm_state142 : begin
            ap_NS_fsm = ap_ST_fsm_state143;
        end
        ap_ST_fsm_state143 : begin
            ap_NS_fsm = ap_ST_fsm_state144;
        end
        ap_ST_fsm_state144 : begin
            ap_NS_fsm = ap_ST_fsm_state145;
        end
        ap_ST_fsm_state145 : begin
            ap_NS_fsm = ap_ST_fsm_state146;
        end
        ap_ST_fsm_state146 : begin
            ap_NS_fsm = ap_ST_fsm_state147;
        end
        ap_ST_fsm_state147 : begin
            ap_NS_fsm = ap_ST_fsm_state148;
        end
        ap_ST_fsm_state148 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state148))) begin
                ap_NS_fsm = ap_ST_fsm_state149;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state148;
            end
        end
        ap_ST_fsm_state149 : begin
            ap_NS_fsm = ap_ST_fsm_state150;
        end
        ap_ST_fsm_state150 : begin
            ap_NS_fsm = ap_ST_fsm_state151;
        end
        ap_ST_fsm_state151 : begin
            ap_NS_fsm = ap_ST_fsm_state152;
        end
        ap_ST_fsm_state152 : begin
            ap_NS_fsm = ap_ST_fsm_state153;
        end
        ap_ST_fsm_state153 : begin
            ap_NS_fsm = ap_ST_fsm_state154;
        end
        ap_ST_fsm_state154 : begin
            ap_NS_fsm = ap_ST_fsm_state155;
        end
        ap_ST_fsm_state155 : begin
            if (((1'b1 == ap_CS_fsm_state155) & ((icmp_ln37_2_fu_1000_p2 == 1'd0) | (icmp_ln37_1_reg_1618 == 1'd0)))) begin
                ap_NS_fsm = ap_ST_fsm_state157;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state156;
            end
        end
        ap_ST_fsm_state156 : begin
            if (((icmp_ln40_1_fu_1046_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state156))) begin
                ap_NS_fsm = ap_ST_fsm_state230;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state155;
            end
        end
        ap_ST_fsm_state157 : begin
            ap_NS_fsm = ap_ST_fsm_state158;
        end
        ap_ST_fsm_state158 : begin
            ap_NS_fsm = ap_ST_fsm_state159;
        end
        ap_ST_fsm_state159 : begin
            ap_NS_fsm = ap_ST_fsm_state160;
        end
        ap_ST_fsm_state160 : begin
            if (((icmp_ln40_2_fu_1149_p2 == 1'd0) & (icmp_ln37_3_reg_1674 == 1'd1) & (1'b1 == ap_CS_fsm_state160))) begin
                ap_NS_fsm = ap_ST_fsm_state159;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state161;
            end
        end
        ap_ST_fsm_state161 : begin
            if (((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state161))) begin
                ap_NS_fsm = ap_ST_fsm_state162;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state161;
            end
        end
        ap_ST_fsm_state162 : begin
            if (((gmem_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state162))) begin
                ap_NS_fsm = ap_ST_fsm_state163;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state162;
            end
        end
        ap_ST_fsm_state163 : begin
            ap_NS_fsm = ap_ST_fsm_state164;
        end
        ap_ST_fsm_state164 : begin
            ap_NS_fsm = ap_ST_fsm_state165;
        end
        ap_ST_fsm_state165 : begin
            ap_NS_fsm = ap_ST_fsm_state166;
        end
        ap_ST_fsm_state166 : begin
            ap_NS_fsm = ap_ST_fsm_state167;
        end
        ap_ST_fsm_state167 : begin
            ap_NS_fsm = ap_ST_fsm_state168;
        end
        ap_ST_fsm_state168 : begin
            ap_NS_fsm = ap_ST_fsm_state169;
        end
        ap_ST_fsm_state169 : begin
            ap_NS_fsm = ap_ST_fsm_state170;
        end
        ap_ST_fsm_state170 : begin
            ap_NS_fsm = ap_ST_fsm_state171;
        end
        ap_ST_fsm_state171 : begin
            ap_NS_fsm = ap_ST_fsm_state172;
        end
        ap_ST_fsm_state172 : begin
            ap_NS_fsm = ap_ST_fsm_state173;
        end
        ap_ST_fsm_state173 : begin
            ap_NS_fsm = ap_ST_fsm_state174;
        end
        ap_ST_fsm_state174 : begin
            ap_NS_fsm = ap_ST_fsm_state175;
        end
        ap_ST_fsm_state175 : begin
            ap_NS_fsm = ap_ST_fsm_state176;
        end
        ap_ST_fsm_state176 : begin
            ap_NS_fsm = ap_ST_fsm_state177;
        end
        ap_ST_fsm_state177 : begin
            ap_NS_fsm = ap_ST_fsm_state178;
        end
        ap_ST_fsm_state178 : begin
            ap_NS_fsm = ap_ST_fsm_state179;
        end
        ap_ST_fsm_state179 : begin
            ap_NS_fsm = ap_ST_fsm_state180;
        end
        ap_ST_fsm_state180 : begin
            ap_NS_fsm = ap_ST_fsm_state181;
        end
        ap_ST_fsm_state181 : begin
            ap_NS_fsm = ap_ST_fsm_state182;
        end
        ap_ST_fsm_state182 : begin
            ap_NS_fsm = ap_ST_fsm_state183;
        end
        ap_ST_fsm_state183 : begin
            ap_NS_fsm = ap_ST_fsm_state184;
        end
        ap_ST_fsm_state184 : begin
            ap_NS_fsm = ap_ST_fsm_state185;
        end
        ap_ST_fsm_state185 : begin
            ap_NS_fsm = ap_ST_fsm_state186;
        end
        ap_ST_fsm_state186 : begin
            ap_NS_fsm = ap_ST_fsm_state187;
        end
        ap_ST_fsm_state187 : begin
            ap_NS_fsm = ap_ST_fsm_state188;
        end
        ap_ST_fsm_state188 : begin
            ap_NS_fsm = ap_ST_fsm_state189;
        end
        ap_ST_fsm_state189 : begin
            ap_NS_fsm = ap_ST_fsm_state190;
        end
        ap_ST_fsm_state190 : begin
            ap_NS_fsm = ap_ST_fsm_state191;
        end
        ap_ST_fsm_state191 : begin
            ap_NS_fsm = ap_ST_fsm_state192;
        end
        ap_ST_fsm_state192 : begin
            ap_NS_fsm = ap_ST_fsm_state193;
        end
        ap_ST_fsm_state193 : begin
            ap_NS_fsm = ap_ST_fsm_state194;
        end
        ap_ST_fsm_state194 : begin
            ap_NS_fsm = ap_ST_fsm_state195;
        end
        ap_ST_fsm_state195 : begin
            ap_NS_fsm = ap_ST_fsm_state196;
        end
        ap_ST_fsm_state196 : begin
            ap_NS_fsm = ap_ST_fsm_state197;
        end
        ap_ST_fsm_state197 : begin
            ap_NS_fsm = ap_ST_fsm_state198;
        end
        ap_ST_fsm_state198 : begin
            ap_NS_fsm = ap_ST_fsm_state199;
        end
        ap_ST_fsm_state199 : begin
            ap_NS_fsm = ap_ST_fsm_state200;
        end
        ap_ST_fsm_state200 : begin
            ap_NS_fsm = ap_ST_fsm_state201;
        end
        ap_ST_fsm_state201 : begin
            ap_NS_fsm = ap_ST_fsm_state202;
        end
        ap_ST_fsm_state202 : begin
            ap_NS_fsm = ap_ST_fsm_state203;
        end
        ap_ST_fsm_state203 : begin
            ap_NS_fsm = ap_ST_fsm_state204;
        end
        ap_ST_fsm_state204 : begin
            ap_NS_fsm = ap_ST_fsm_state205;
        end
        ap_ST_fsm_state205 : begin
            ap_NS_fsm = ap_ST_fsm_state206;
        end
        ap_ST_fsm_state206 : begin
            ap_NS_fsm = ap_ST_fsm_state207;
        end
        ap_ST_fsm_state207 : begin
            ap_NS_fsm = ap_ST_fsm_state208;
        end
        ap_ST_fsm_state208 : begin
            ap_NS_fsm = ap_ST_fsm_state209;
        end
        ap_ST_fsm_state209 : begin
            ap_NS_fsm = ap_ST_fsm_state210;
        end
        ap_ST_fsm_state210 : begin
            ap_NS_fsm = ap_ST_fsm_state211;
        end
        ap_ST_fsm_state211 : begin
            ap_NS_fsm = ap_ST_fsm_state212;
        end
        ap_ST_fsm_state212 : begin
            ap_NS_fsm = ap_ST_fsm_state213;
        end
        ap_ST_fsm_state213 : begin
            ap_NS_fsm = ap_ST_fsm_state214;
        end
        ap_ST_fsm_state214 : begin
            ap_NS_fsm = ap_ST_fsm_state215;
        end
        ap_ST_fsm_state215 : begin
            ap_NS_fsm = ap_ST_fsm_state216;
        end
        ap_ST_fsm_state216 : begin
            ap_NS_fsm = ap_ST_fsm_state217;
        end
        ap_ST_fsm_state217 : begin
            ap_NS_fsm = ap_ST_fsm_state218;
        end
        ap_ST_fsm_state218 : begin
            ap_NS_fsm = ap_ST_fsm_state219;
        end
        ap_ST_fsm_state219 : begin
            ap_NS_fsm = ap_ST_fsm_state220;
        end
        ap_ST_fsm_state220 : begin
            ap_NS_fsm = ap_ST_fsm_state221;
        end
        ap_ST_fsm_state221 : begin
            ap_NS_fsm = ap_ST_fsm_state222;
        end
        ap_ST_fsm_state222 : begin
            ap_NS_fsm = ap_ST_fsm_state223;
        end
        ap_ST_fsm_state223 : begin
            ap_NS_fsm = ap_ST_fsm_state224;
        end
        ap_ST_fsm_state224 : begin
            ap_NS_fsm = ap_ST_fsm_state225;
        end
        ap_ST_fsm_state225 : begin
            ap_NS_fsm = ap_ST_fsm_state226;
        end
        ap_ST_fsm_state226 : begin
            ap_NS_fsm = ap_ST_fsm_state227;
        end
        ap_ST_fsm_state227 : begin
            ap_NS_fsm = ap_ST_fsm_state228;
        end
        ap_ST_fsm_state228 : begin
            ap_NS_fsm = ap_ST_fsm_state229;
        end
        ap_ST_fsm_state229 : begin
            ap_NS_fsm = ap_ST_fsm_state230;
        end
        ap_ST_fsm_state230 : begin
            if ((~((ap_predicate_op719_writeresp_state230 == 1'b1) & (gmem_BVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state230))) begin
                ap_NS_fsm = ap_ST_fsm_state77;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state230;
            end
        end
        ap_ST_fsm_state231 : begin
            ap_NS_fsm = ap_ST_fsm_state232;
        end
        ap_ST_fsm_state232 : begin
            ap_NS_fsm = ap_ST_fsm_state233;
        end
        ap_ST_fsm_state233 : begin
            ap_NS_fsm = ap_ST_fsm_state234;
        end
        ap_ST_fsm_state234 : begin
            ap_NS_fsm = ap_ST_fsm_state235;
        end
        ap_ST_fsm_state235 : begin
            if (((icmp_ln40_fu_1311_p2 == 1'd0) & (icmp_ln37_reg_1717 == 1'd1) & (1'b1 == ap_CS_fsm_state235))) begin
                ap_NS_fsm = ap_ST_fsm_state234;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state236;
            end
        end
        ap_ST_fsm_state236 : begin
            if (((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state236))) begin
                ap_NS_fsm = ap_ST_fsm_state237;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state236;
            end
        end
        ap_ST_fsm_state237 : begin
            if (((gmem_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state237))) begin
                ap_NS_fsm = ap_ST_fsm_state238;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state237;
            end
        end
        ap_ST_fsm_state238 : begin
            ap_NS_fsm = ap_ST_fsm_state239;
        end
        ap_ST_fsm_state239 : begin
            ap_NS_fsm = ap_ST_fsm_state240;
        end
        ap_ST_fsm_state240 : begin
            ap_NS_fsm = ap_ST_fsm_state241;
        end
        ap_ST_fsm_state241 : begin
            ap_NS_fsm = ap_ST_fsm_state242;
        end
        ap_ST_fsm_state242 : begin
            ap_NS_fsm = ap_ST_fsm_state243;
        end
        ap_ST_fsm_state243 : begin
            ap_NS_fsm = ap_ST_fsm_state244;
        end
        ap_ST_fsm_state244 : begin
            ap_NS_fsm = ap_ST_fsm_state245;
        end
        ap_ST_fsm_state245 : begin
            ap_NS_fsm = ap_ST_fsm_state246;
        end
        ap_ST_fsm_state246 : begin
            ap_NS_fsm = ap_ST_fsm_state247;
        end
        ap_ST_fsm_state247 : begin
            ap_NS_fsm = ap_ST_fsm_state248;
        end
        ap_ST_fsm_state248 : begin
            ap_NS_fsm = ap_ST_fsm_state249;
        end
        ap_ST_fsm_state249 : begin
            ap_NS_fsm = ap_ST_fsm_state250;
        end
        ap_ST_fsm_state250 : begin
            ap_NS_fsm = ap_ST_fsm_state251;
        end
        ap_ST_fsm_state251 : begin
            ap_NS_fsm = ap_ST_fsm_state252;
        end
        ap_ST_fsm_state252 : begin
            ap_NS_fsm = ap_ST_fsm_state253;
        end
        ap_ST_fsm_state253 : begin
            ap_NS_fsm = ap_ST_fsm_state254;
        end
        ap_ST_fsm_state254 : begin
            ap_NS_fsm = ap_ST_fsm_state255;
        end
        ap_ST_fsm_state255 : begin
            ap_NS_fsm = ap_ST_fsm_state256;
        end
        ap_ST_fsm_state256 : begin
            ap_NS_fsm = ap_ST_fsm_state257;
        end
        ap_ST_fsm_state257 : begin
            ap_NS_fsm = ap_ST_fsm_state258;
        end
        ap_ST_fsm_state258 : begin
            ap_NS_fsm = ap_ST_fsm_state259;
        end
        ap_ST_fsm_state259 : begin
            ap_NS_fsm = ap_ST_fsm_state260;
        end
        ap_ST_fsm_state260 : begin
            ap_NS_fsm = ap_ST_fsm_state261;
        end
        ap_ST_fsm_state261 : begin
            ap_NS_fsm = ap_ST_fsm_state262;
        end
        ap_ST_fsm_state262 : begin
            ap_NS_fsm = ap_ST_fsm_state263;
        end
        ap_ST_fsm_state263 : begin
            ap_NS_fsm = ap_ST_fsm_state264;
        end
        ap_ST_fsm_state264 : begin
            ap_NS_fsm = ap_ST_fsm_state265;
        end
        ap_ST_fsm_state265 : begin
            ap_NS_fsm = ap_ST_fsm_state266;
        end
        ap_ST_fsm_state266 : begin
            ap_NS_fsm = ap_ST_fsm_state267;
        end
        ap_ST_fsm_state267 : begin
            ap_NS_fsm = ap_ST_fsm_state268;
        end
        ap_ST_fsm_state268 : begin
            ap_NS_fsm = ap_ST_fsm_state269;
        end
        ap_ST_fsm_state269 : begin
            ap_NS_fsm = ap_ST_fsm_state270;
        end
        ap_ST_fsm_state270 : begin
            ap_NS_fsm = ap_ST_fsm_state271;
        end
        ap_ST_fsm_state271 : begin
            ap_NS_fsm = ap_ST_fsm_state272;
        end
        ap_ST_fsm_state272 : begin
            ap_NS_fsm = ap_ST_fsm_state273;
        end
        ap_ST_fsm_state273 : begin
            ap_NS_fsm = ap_ST_fsm_state274;
        end
        ap_ST_fsm_state274 : begin
            ap_NS_fsm = ap_ST_fsm_state275;
        end
        ap_ST_fsm_state275 : begin
            ap_NS_fsm = ap_ST_fsm_state276;
        end
        ap_ST_fsm_state276 : begin
            ap_NS_fsm = ap_ST_fsm_state277;
        end
        ap_ST_fsm_state277 : begin
            ap_NS_fsm = ap_ST_fsm_state278;
        end
        ap_ST_fsm_state278 : begin
            ap_NS_fsm = ap_ST_fsm_state279;
        end
        ap_ST_fsm_state279 : begin
            ap_NS_fsm = ap_ST_fsm_state280;
        end
        ap_ST_fsm_state280 : begin
            ap_NS_fsm = ap_ST_fsm_state281;
        end
        ap_ST_fsm_state281 : begin
            ap_NS_fsm = ap_ST_fsm_state282;
        end
        ap_ST_fsm_state282 : begin
            ap_NS_fsm = ap_ST_fsm_state283;
        end
        ap_ST_fsm_state283 : begin
            ap_NS_fsm = ap_ST_fsm_state284;
        end
        ap_ST_fsm_state284 : begin
            ap_NS_fsm = ap_ST_fsm_state285;
        end
        ap_ST_fsm_state285 : begin
            ap_NS_fsm = ap_ST_fsm_state286;
        end
        ap_ST_fsm_state286 : begin
            ap_NS_fsm = ap_ST_fsm_state287;
        end
        ap_ST_fsm_state287 : begin
            ap_NS_fsm = ap_ST_fsm_state288;
        end
        ap_ST_fsm_state288 : begin
            ap_NS_fsm = ap_ST_fsm_state289;
        end
        ap_ST_fsm_state289 : begin
            ap_NS_fsm = ap_ST_fsm_state290;
        end
        ap_ST_fsm_state290 : begin
            ap_NS_fsm = ap_ST_fsm_state291;
        end
        ap_ST_fsm_state291 : begin
            ap_NS_fsm = ap_ST_fsm_state292;
        end
        ap_ST_fsm_state292 : begin
            ap_NS_fsm = ap_ST_fsm_state293;
        end
        ap_ST_fsm_state293 : begin
            ap_NS_fsm = ap_ST_fsm_state294;
        end
        ap_ST_fsm_state294 : begin
            ap_NS_fsm = ap_ST_fsm_state295;
        end
        ap_ST_fsm_state295 : begin
            ap_NS_fsm = ap_ST_fsm_state296;
        end
        ap_ST_fsm_state296 : begin
            ap_NS_fsm = ap_ST_fsm_state297;
        end
        ap_ST_fsm_state297 : begin
            ap_NS_fsm = ap_ST_fsm_state298;
        end
        ap_ST_fsm_state298 : begin
            ap_NS_fsm = ap_ST_fsm_state299;
        end
        ap_ST_fsm_state299 : begin
            ap_NS_fsm = ap_ST_fsm_state300;
        end
        ap_ST_fsm_state300 : begin
            ap_NS_fsm = ap_ST_fsm_state301;
        end
        ap_ST_fsm_state301 : begin
            ap_NS_fsm = ap_ST_fsm_state302;
        end
        ap_ST_fsm_state302 : begin
            ap_NS_fsm = ap_ST_fsm_state303;
        end
        ap_ST_fsm_state303 : begin
            ap_NS_fsm = ap_ST_fsm_state304;
        end
        ap_ST_fsm_state304 : begin
            ap_NS_fsm = ap_ST_fsm_state305;
        end
        ap_ST_fsm_state305 : begin
            if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state305))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state305;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln103_fu_1170_p2 = (zext_ln103_fu_1166_p1 + data_out);

assign add_ln115_fu_1328_p2 = (zext_ln115_fu_1324_p1 + data_out);

assign add_ln37_1_fu_1005_p2 = (i_2_reg_392 + 31'd1);

assign add_ln37_2_fu_1143_p2 = (i_3_reg_403 + 31'd1);

assign add_ln37_fu_1305_p2 = (i_1_reg_534 + 31'd1);

assign add_ln62_1_fu_623_p2 = (trunc_ln62_fu_619_p1 + 8'd1);

assign add_ln62_fu_571_p2 = (ap_phi_mux_indvars_iv97_phi_fu_329_p4 + 9'd1);

assign add_ln75_fu_706_p2 = (i_reg_381 + 32'd1);

assign add_ln78_1_fu_761_p2 = (trunc_ln78_1_fu_728_p1 + 2'd1);

assign add_ln78_2_fu_767_p2 = (add_ln78_1_fu_761_p2 + trunc_ln78_reg_1460);

assign add_ln78_fu_736_p2 = (zext_ln78_fu_732_p1 + data_in);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state148 = ap_CS_fsm[32'd145];

assign ap_CS_fsm_state149 = ap_CS_fsm[32'd146];

assign ap_CS_fsm_state150 = ap_CS_fsm[32'd147];

assign ap_CS_fsm_state151 = ap_CS_fsm[32'd148];

assign ap_CS_fsm_state152 = ap_CS_fsm[32'd149];

assign ap_CS_fsm_state153 = ap_CS_fsm[32'd150];

assign ap_CS_fsm_state154 = ap_CS_fsm[32'd151];

assign ap_CS_fsm_state155 = ap_CS_fsm[32'd152];

assign ap_CS_fsm_state156 = ap_CS_fsm[32'd153];

assign ap_CS_fsm_state157 = ap_CS_fsm[32'd154];

assign ap_CS_fsm_state158 = ap_CS_fsm[32'd155];

assign ap_CS_fsm_state159 = ap_CS_fsm[32'd156];

assign ap_CS_fsm_state160 = ap_CS_fsm[32'd157];

assign ap_CS_fsm_state161 = ap_CS_fsm[32'd158];

assign ap_CS_fsm_state162 = ap_CS_fsm[32'd159];

assign ap_CS_fsm_state230 = ap_CS_fsm[32'd227];

assign ap_CS_fsm_state231 = ap_CS_fsm[32'd228];

assign ap_CS_fsm_state232 = ap_CS_fsm[32'd229];

assign ap_CS_fsm_state233 = ap_CS_fsm[32'd230];

assign ap_CS_fsm_state234 = ap_CS_fsm[32'd231];

assign ap_CS_fsm_state235 = ap_CS_fsm[32'd232];

assign ap_CS_fsm_state236 = ap_CS_fsm[32'd233];

assign ap_CS_fsm_state237 = ap_CS_fsm[32'd234];

assign ap_CS_fsm_state305 = ap_CS_fsm[32'd302];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state75 = ap_CS_fsm[32'd72];

assign ap_CS_fsm_state76 = ap_CS_fsm[32'd73];

assign ap_CS_fsm_state77 = ap_CS_fsm[32'd74];

assign ap_CS_fsm_state78 = ap_CS_fsm[32'd75];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

always @ (*) begin
    ap_block_state230 = ((ap_predicate_op719_writeresp_state230 == 1'b1) & (gmem_BVALID == 1'b0));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_677 = (((grp_load_fu_562_p1 == 32'd4) & (icmp_ln75_1_fu_718_p2 == 1'd1)) | ((grp_load_fu_562_p1 == 32'd3) & (icmp_ln75_1_fu_718_p2 == 1'd1)));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_mux_data_assign_load24_phi_fu_374_p4 = data_assign_load24_reg_371;

always @ (*) begin
    ap_predicate_op719_writeresp_state230 = ((icmp_ln37_1_reg_1618 == 1'd0) | (icmp_ln37_2_reg_1622 == 1'd0));
end

assign c_1_fu_806_p1 = lshr_ln78_fu_801_p2[7:0];

assign code_fu_1195_p2 = (code_1_fu_160 + 32'd1);

assign grp_fu_565_p2 = (substring_arr_index_1_fu_152 ^ 32'd3);

assign grp_load_fu_562_p1 = substring_arr_index_1_fu_152;

assign h_11_fu_1238_p0 = (zext_ln23_fu_1228_p1 ^ h_9_reg_489);

assign h_14_fu_1264_p0 = (zext_ln26_1_fu_1254_p1 ^ h_12_reg_525);

assign h_15_fu_1284_p2 = (zext_ln28_1_fu_1280_p1 ^ h_14_fu_1264_p2);

assign h_16_fu_829_p2 = (substring_arr_index_fu_824_p2 ^ 32'd3);

assign h_17_fu_846_p2 = (zext_ln19_1_fu_842_p1 ^ h_16_fu_829_p2);

assign h_18_fu_857_p3 = ((icmp_ln15_fu_852_p2[0:0] == 1'b1) ? 32'd1 : h_17_fu_846_p2);

assign h_19_fu_876_p2 = (zext_ln21_1_fu_872_p1 ^ h_18_fu_857_p3);

assign h_1_fu_593_p0 = h_1_fu_593_p00;

assign h_1_fu_593_p00 = h_fu_583_p2;

assign h_20_fu_887_p3 = ((icmp_ln15_1_fu_882_p2[0:0] == 1'b1) ? 32'd2 : h_19_fu_876_p2);

assign h_21_fu_899_p2 = (zext_ln23_1_fu_895_p1 ^ h_20_fu_887_p3);

assign h_23_fu_934_p3 = ((or_ln15_2_fu_928_p2[0:0] == 1'b1) ? h_22_fu_915_p2 : h_16_reg_1552);

assign h_24_fu_955_p2 = (zext_ln26_2_fu_951_p1 ^ h_23_fu_934_p3);

assign h_28_fu_1011_p2 = (zext_ln19_1_reg_1557 ^ grp_fu_565_p2);

assign h_29_fu_1016_p3 = ((icmp_ln15_3_reg_1600[0:0] == 1'b1) ? 32'd1 : h_28_fu_1011_p2);

assign h_2_fu_613_p2 = (zext_ln26_fu_609_p1 ^ h_1_fu_593_p2);

assign h_30_fu_1023_p2 = (zext_ln21_1_reg_1569 ^ h_29_fu_1016_p3);

assign h_31_fu_1028_p3 = ((icmp_ln15_reg_1562[0:0] == 1'b1) ? 32'd2 : h_30_fu_1023_p2);

assign h_32_fu_1035_p2 = (zext_ln23_1_reg_1584 ^ h_31_fu_1028_p3);

assign h_34_fu_1074_p3 = ((or_ln15_5_fu_1068_p2[0:0] == 1'b1) ? h_33_fu_1055_p2 : h_27_reg_1636);

assign h_35_fu_1095_p2 = (zext_ln26_3_fu_1091_p1 ^ h_34_fu_1074_p3);

assign h_37_fu_1120_p2 = (zext_ln28_3_fu_1116_p1 ^ h_36_fu_1101_p2);

assign h_38_fu_980_p2 = (zext_ln28_2_fu_976_p1 ^ h_25_fu_961_p2);

assign h_4_fu_648_p2 = (zext_ln28_fu_644_p1 ^ h_3_fu_629_p2);

assign h_6_fu_784_p2 = (zext_ln19_fu_780_p1 ^ grp_fu_565_p2);

assign h_8_fu_1222_p2 = (zext_ln21_fu_1218_p1 ^ h_7_reg_437);

assign h_fu_583_p2 = (empty_reg_337 ^ 8'd2);

assign icmp_ln15_1_fu_882_p2 = ((substring_arr_index_1_load_reg_1520 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln15_2_fu_905_p2 = ((substring_arr_index_1_load_reg_1520 == 32'd3) ? 1'b1 : 1'b0);

assign icmp_ln15_3_fu_910_p2 = ((substring_arr_index_1_load_reg_1520 == 32'd2) ? 1'b1 : 1'b0);

assign icmp_ln15_4_fu_1040_p2 = ((substring_arr_index_1_fu_152 == 32'd4) ? 1'b1 : 1'b0);

assign icmp_ln15_fu_852_p2 = ((substring_arr_index_1_load_reg_1520 == 32'd1) ? 1'b1 : 1'b0);

assign icmp_ln37_1_fu_986_p2 = (($signed(code_1_fu_160) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln37_2_fu_1000_p2 = (($signed(zext_ln37_3_fu_996_p1) < $signed(code_1_fu_160)) ? 1'b1 : 1'b0);

assign icmp_ln37_3_fu_1138_p2 = (($signed(zext_ln37_6_fu_1134_p1) < $signed(code_1_fu_160)) ? 1'b1 : 1'b0);

assign icmp_ln37_fu_1299_p2 = (($signed(zext_ln37_1_fu_1295_p1) < $signed(code_0_lcssa112_reg_503)) ? 1'b1 : 1'b0);

assign icmp_ln40_1_fu_1046_p2 = ((h_38_reg_1612 == table_r_q0) ? 1'b1 : 1'b0);

assign icmp_ln40_2_fu_1149_p2 = ((h_37_reg_1659 == table_r_q0) ? 1'b1 : 1'b0);

assign icmp_ln40_fu_1311_p2 = ((h_15_reg_1707 == table_r_q0) ? 1'b1 : 1'b0);

assign icmp_ln62_fu_577_p2 = ((ap_phi_mux_indvars_iv97_phi_fu_329_p4 == 9'd256) ? 1'b1 : 1'b0);

assign icmp_ln75_1_fu_718_p2 = ((i_reg_381 == len) ? 1'b1 : 1'b0);

assign icmp_ln75_fu_688_p2 = ((len == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln77_fu_723_p2 = ((i_reg_381 == sub_reg_1415) ? 1'b1 : 1'b0);

assign indvars_iv97_cast_fu_654_p1 = indvars_iv97_reg_325_pp0_iter1_reg;

assign lshr_ln1_fu_634_p4 = {{h_3_fu_629_p2[31:15]}};

assign lshr_ln26_1_fu_1244_p4 = {{h_12_reg_525[31:13]}};

assign lshr_ln26_2_fu_941_p4 = {{h_23_fu_934_p3[31:13]}};

assign lshr_ln26_3_fu_1081_p4 = {{h_34_fu_1074_p3[31:13]}};

assign lshr_ln28_1_fu_1270_p4 = {{h_14_fu_1264_p2[31:15]}};

assign lshr_ln28_2_fu_966_p4 = {{h_25_fu_961_p2[31:15]}};

assign lshr_ln28_3_fu_1106_p4 = {{h_36_fu_1101_p2[31:15]}};

assign lshr_ln78_fu_801_p2 = gmem_addr_1_read_reg_1515 >> zext_ln78_1_fu_797_p1;

assign lshr_ln_fu_599_p4 = {{h_1_fu_593_p2[31:13]}};

assign or_ln15_1_fu_924_p2 = (icmp_ln15_reg_1562 | icmp_ln15_1_reg_1574);

assign or_ln15_2_fu_928_p2 = (or_ln15_fu_920_p2 | or_ln15_1_fu_924_p2);

assign or_ln15_3_fu_1060_p2 = (icmp_ln15_4_reg_1646 | icmp_ln15_2_reg_1594);

assign or_ln15_4_fu_1064_p2 = (icmp_ln15_reg_1562 | icmp_ln15_3_reg_1600);

assign or_ln15_5_fu_1068_p2 = (or_ln15_4_fu_1064_p2 | or_ln15_3_fu_1060_p2);

assign or_ln15_fu_920_p2 = (icmp_ln15_3_reg_1600 | icmp_ln15_2_reg_1594);

assign output_index_2_fu_1154_p2 = (output_index_fu_156 + 32'd1);

assign sext_ln103_fu_1185_p1 = $signed(trunc_ln4_fu_1175_p4);

assign sext_ln115_fu_1343_p1 = $signed(trunc_ln3_fu_1333_p4);

assign sext_ln71_fu_668_p1 = $signed(trunc_ln71_1_fu_659_p4);

assign sext_ln78_fu_751_p1 = $signed(trunc_ln78_2_fu_741_p4);

assign shl_ln19_1_fu_835_p3 = {{substring_array_load_2_reg_1535}, {16'd0}};

assign shl_ln1_fu_1210_p3 = {{substring_array_load_1_reg_348}, {8'd0}};

assign shl_ln21_1_fu_865_p3 = {{substring_array_load_3_reg_1541}, {8'd0}};

assign shl_ln2_fu_790_p3 = {{add_ln78_2_reg_1497}, {3'd0}};

assign shl_ln3_fu_1316_p3 = {{output_index_0_lcssa110_reg_514}, {2'd0}};

assign shl_ln4_fu_1159_p3 = {{output_index_fu_156}, {2'd0}};

assign shl_ln_fu_772_p3 = {{substring_array_load_reg_360}, {16'd0}};

assign sub_fu_683_p2 = ($signed(len) + $signed(32'd4294967295));

assign substring_arr_index_fu_824_p2 = (substring_arr_index_1_load_reg_1520 + 32'd1);

assign trunc_ln3_fu_1333_p4 = {{add_ln115_fu_1328_p2[63:2]}};

assign trunc_ln4_fu_1175_p4 = {{add_ln103_fu_1170_p2[63:2]}};

assign trunc_ln62_fu_619_p1 = ap_phi_mux_indvars_iv97_phi_fu_329_p4[7:0];

assign trunc_ln71_1_fu_659_p4 = {{data_in[63:2]}};

assign trunc_ln71_fu_679_p1 = gmem_RDATA[7:0];

assign trunc_ln78_1_fu_728_p1 = i_reg_381[1:0];

assign trunc_ln78_2_fu_741_p4 = {{add_ln78_fu_736_p2[63:2]}};

assign trunc_ln78_fu_693_p1 = data_in[1:0];

assign zext_ln103_fu_1166_p1 = shl_ln4_fu_1159_p3;

assign zext_ln115_fu_1324_p1 = shl_ln3_fu_1316_p3;

assign zext_ln19_1_fu_842_p1 = shl_ln19_1_fu_835_p3;

assign zext_ln19_fu_780_p1 = shl_ln_fu_772_p3;

assign zext_ln21_1_fu_872_p1 = shl_ln21_1_fu_865_p3;

assign zext_ln21_fu_1218_p1 = shl_ln1_fu_1210_p3;

assign zext_ln23_1_fu_895_p1 = substring_array_q1;

assign zext_ln23_fu_1228_p1 = data_assign_load_reg_448;

assign zext_ln26_1_fu_1254_p1 = lshr_ln26_1_fu_1244_p4;

assign zext_ln26_2_fu_951_p1 = lshr_ln26_2_fu_941_p4;

assign zext_ln26_3_fu_1091_p1 = lshr_ln26_3_fu_1081_p4;

assign zext_ln26_fu_609_p1 = lshr_ln_fu_599_p4;

assign zext_ln28_1_fu_1280_p1 = lshr_ln28_1_fu_1270_p4;

assign zext_ln28_2_fu_976_p1 = lshr_ln28_2_fu_966_p4;

assign zext_ln28_3_fu_1116_p1 = lshr_ln28_3_fu_1106_p4;

assign zext_ln28_fu_644_p1 = lshr_ln1_fu_634_p4;

assign zext_ln37_1_fu_1295_p1 = i_1_reg_534;

assign zext_ln37_2_fu_991_p1 = i_2_reg_392;

assign zext_ln37_3_fu_996_p1 = i_2_reg_392;

assign zext_ln37_4_fu_1126_p1 = code_1_fu_160;

assign zext_ln37_5_fu_1129_p1 = i_3_reg_403;

assign zext_ln37_6_fu_1134_p1 = i_3_reg_403;

assign zext_ln37_fu_1290_p1 = i_1_reg_534;

assign zext_ln78_1_fu_797_p1 = shl_ln2_fu_790_p3;

assign zext_ln78_fu_732_p1 = add_ln75_fu_706_p2;

assign zext_ln81_fu_819_p1 = substring_arr_index_1_fu_152;

always @ (posedge ap_clk) begin
    zext_ln19_1_reg_1557[15:0] <= 16'b0000000000000000;
    zext_ln19_1_reg_1557[31:24] <= 8'b00000000;
    zext_ln21_1_reg_1569[7:0] <= 8'b00000000;
    zext_ln21_1_reg_1569[31:16] <= 16'b0000000000000000;
    zext_ln23_1_reg_1584[31:8] <= 24'b000000000000000000000000;
    zext_ln37_4_reg_1664[63:32] <= 32'b00000000000000000000000000000000;
    zext_ln37_6_reg_1669[31] <= 1'b0;
    zext_ln37_1_reg_1712[31] <= 1'b0;
end

endmodule //LZW_encoding_HW
